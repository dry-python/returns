- case: check_all_laws
  disable_cache: false
  parametrized:
    - container: Result
    - container: Maybe
    - container: IO
    - container: IOResult
    - container: Reader
    - container: ReaderResult
    - container: ReaderIOResult
    - container: ReaderFutureResult
    - container: Future
    - container: FutureResult
  main: |
    from returns.context import (
        Reader, ReaderResult, ReaderIOResult, ReaderFutureResult,
    )
    from returns.future import Future, FutureResult
    from returns.maybe import Maybe
    from returns.result import Result
    from returns.io import IO, IOResult

    from returns.primitivies.laws import Lawful
    from typing import Type

    x: Type[Lawful] = {{ container }}

- case: test_all_laws_accepts_only_one_approach
  disable_cache: false
  # TODO: remove this config after
  #     mypy/typeshed/stdlib/unittest/mock.pyi:120:
  #     error: Class cannot subclass "Any" (has type "Any")
  # is fixed.
  mypy_config:
    disallow_subclassing_any = False
  main: |
    from hypothesis import strategies as st
    from returns.contrib.hypothesis.laws import check_all_laws
    from returns.result import Result, Success

    check_all_laws(Result)
    check_all_laws(Result, use_init=True)
    check_all_laws(Result, container_strategy=st.builds(Success, st.integers()))
    check_all_laws(  # E: No overload variant of "check_all_laws" matches argument types "Type[Result[_ValueType_co, _ErrorType_co]]", "bool", "SearchStrategy[Success[Any]]"  [call-overload] # N: Possible overload variants:  # N:     def [Example_co] check_all_laws(container_type: Type[Lawful[Example_co]], *, settings_kwargs: Optional[Dict[str, Any]] = ..., container_strategy: Optional[Union[SearchStrategy[Example_co], Callable[[Type[Example_co]], SearchStrategy[Example_co]]]] = ...) -> None  # N:     def [Example_co] check_all_laws(container_type: Type[Lawful[Example_co]], *, settings_kwargs: Optional[Dict[str, Any]] = ..., use_init: bool = ...) -> None
        Result, use_init=True, container_strategy=st.builds(Success, st.integers())
    )
