- case: bind_optional_wrong_instance_type
  disable_cache: true
  main: |
    from returns.methods import bind_optional
    from returns.maybe import Maybe
    from typing import Optional

    def test(arg: float) -> Optional[int]:
        ...

    x: Maybe[str]
    bind_optional(x, test)
  out: |
    main:9: error: Argument 2 to "bind_optional" has incompatible type "Callable[[float], Optional[int]]"; expected "Callable[[str], Optional[int]]"


- case: bind_optional_maybe
  disable_cache: true
  main: |
    from returns.methods import bind_optional
    from returns.maybe import Maybe
    from typing import Optional

    def test(arg: float) -> Optional[str]:
        ...

    x: Maybe[float]
    reveal_type(bind_optional(x, test))  # N: Revealed type is 'returns.maybe.Maybe[builtins.str*]'
