- case: modify_env2_wrong_env
  disable_cache: true
  main: |
    from returns.methods import modify_env2
    from returns.context import RequiresContext

    x: RequiresContext[float, str]
    modify_env2(x, int)
  out: |
    main:5: error: Argument 2 to "internal_modify_env2" has incompatible type "Type[int]"; expected "Callable[[Union[str, SupportsInt, _SupportsIndex]], str]"


- case: modify_env2_wrong_type
  disable_cache: true
  main: |
    from returns.methods import modify_env2
    from returns.context import RequiresContextResult

    x: RequiresContextResult[float, str, int]
    modify_env2(x, int)
  out: |
    main:5: error: Argument 2 to "internal_modify_env2" has incompatible type "Type[int]"; expected "Callable[[Union[str, SupportsInt, _SupportsIndex]], str]"
    main:5: error: Value of type variable "_Reader2Kind" of "internal_modify_env2" cannot be "RequiresContextResult[Any, Any, Any]"


- case: modify_env2_requires_context
  disable_cache: true
  main: |
    from returns.methods import modify_env2
    from returns.context import RequiresContext

    x: RequiresContext[float, int]
    reveal_type(modify_env2(x, int))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.float, Union[builtins.str, typing.SupportsInt, builtins._SupportsIndex]]'


- case: modify_env2_custom_type
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.reader import ReaderBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.methods import modify_env2

    _EnvType = TypeVar('_EnvType')
    _ReturnType = TypeVar('_ReturnType')

    class MyClass(
        SupportsKind2['MyClass', _ReturnType, _EnvType],
        ReaderBased2[_ReturnType, _EnvType],
    ):
        ...

    x: MyClass[float, int]
    reveal_type(modify_env2(x, int))  # N: Revealed type is 'main.MyClass[builtins.float, Union[builtins.str, typing.SupportsInt, builtins._SupportsIndex]]'
