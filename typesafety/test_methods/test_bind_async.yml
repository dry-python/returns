- case: bind_async_wrong_value
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.future import Future

    async def test(arg: str) -> Future[int]:
        ...

    x: Future[float]
    bind_async(x, test)  # E: Argument 2 to "bind_async" has incompatible type "Callable[[str], Coroutine[Any, Any, Future[int]]]"; expected "Callable[[float], Awaitable[KindN[Future[Any], int, NoReturn, NoReturn]]]"


- case: bind_async_wrong_second_type
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.future import FutureResult

    async def test(arg: str) -> FutureResult[int, str]:
        ...

    x: FutureResult[str, bool]
    bind_async(x, test)  # E: Argument 2 to "bind_async" has incompatible type "Callable[[str], Coroutine[Any, Any, FutureResult[int, str]]]"; expected "Callable[[str], Awaitable[KindN[FutureResult[Any, Any], int, bool, NoReturn]]]"


- case: bind_async_wrong_instance_type
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.io import IO

    async def test(arg: str) -> IO[int]:
        ...

    x: IO[float]
    bind_async(x, test)
  out: |
    main:8: error: Argument 2 to "bind_async" has incompatible type "Callable[[str], Coroutine[Any, Any, IO[int]]]"; expected "Callable[[float], Awaitable[KindN[IO[Any], int, NoReturn, NoReturn]]]"
    main:8: error: Value of type variable "_FutureKind" of "bind_async" cannot be "IO[Any]"


- case: bind_async_wrong_function_type
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.future import Future

    def test(arg: float) -> Future[int]:
        ...

    x: Future[float]
    bind_async(x, test)  # E: Argument 2 to "bind_async" has incompatible type "Callable[[float], Future[int]]"; expected "Callable[[float], Awaitable[KindN[Future[Any], <nothing>, NoReturn, NoReturn]]]"


- case: bind_async_requires_context_future_result
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.context import RequiresContextFutureResult

    async def test(arg: float) -> RequiresContextFutureResult[int, bool, str]:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(bind_async(x, test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int*, builtins.bool, builtins.str]'


- case: bind_async_future
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.future import Future

    async def test(arg: float) -> Future[int]:
        ...

    x: Future[float]
    reveal_type(bind_async(x, test))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: bind_async_future_result
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.future import FutureResult

    async def test(arg: float) -> FutureResult[int, str]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_async(x, test))  # N: Revealed type is 'returns.future.FutureResult[builtins.int*, builtins.str]'


- case: bind_async_custom_type
  disable_cache: true
  main: |
    from returns.methods import bind_async
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.specific.future import FutureLike1
    from returns.future import Future
    from typing import TypeVar

    T = TypeVar('T')

    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        ...

    async def test(arg: float) -> MyClass[int]:
        ...

    x: MyClass[float]
    reveal_type(bind_async(x, test))  # N: Revealed type is 'main.MyClass[builtins.int*]'
