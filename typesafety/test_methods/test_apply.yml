- case: apply_wrong_extra_types
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.context import RequiresContextFutureResult
    from typing import Callable

    test: RequiresContextFutureResult[Callable[[float], int], str, str]
    x: RequiresContextFutureResult[float, float, float]

    apply(x, test)  # E: Argument 2 to "internal_apply" has incompatible type "RequiresContextFutureResult[Callable[[float], int], str, str]"; expected "KindN[RequiresContextFutureResult[Any, Any, Any], Callable[[float], int], float, float]"


- case: apply_wrong_value_type
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.context import RequiresContextFutureResult
    from typing import Callable

    test: RequiresContextFutureResult[Callable[[float], int], str, str]
    x: RequiresContextFutureResult[str, str, str]

    apply(x, test)  # E: Argument 2 to "internal_apply" has incompatible type "RequiresContextFutureResult[Callable[[float], int], str, str]"; expected "KindN[RequiresContextFutureResult[Any, Any, Any], Callable[[str], int], str, str]"


- case: apply_io
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.io import IO

    def test(arg: float) -> int:
        ...

    x: IO[float]
    reveal_type(apply(x, IO(test)))  # N: Revealed type is 'returns.io.IO[builtins.int*]'


- case: apply_maybe
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.maybe import Maybe

    def test(arg: float) -> int:
        ...

    x: Maybe[float]
    reveal_type(apply(x, Maybe.from_value(test)))  # N: Revealed type is 'returns.maybe.Maybe[builtins.int*]'


- case: apply_result
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.result import Result
    from typing import Callable

    test: Result[Callable[[float], int], str]
    x: Result[float, str]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.result.Result[builtins.int*, builtins.str]'


- case: apply_ioresult
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.io import IOResult
    from typing import Callable

    test: IOResult[Callable[[float], int], str]
    x: IOResult[float, str]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.io.IOResult[builtins.int*, builtins.str]'


- case: apply_requires_context
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.context import RequiresContext
    from typing import Callable

    test: RequiresContext[Callable[[float], int], bool]
    x: RequiresContext[float, bool]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.int*, builtins.bool]'


- case: apply_requires_context_result
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.context import RequiresContextResult
    from typing import Callable

    test: RequiresContextResult[Callable[[float], int], str, bool]
    x: RequiresContextResult[float, str, bool]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, builtins.str, builtins.bool]'


- case: apply_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.context import RequiresContextIOResult
    from typing import Callable

    test: RequiresContextIOResult[Callable[[float], int], str, bool]
    x: RequiresContextIOResult[float, str, bool]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int*, builtins.str, builtins.bool]'


- case: apply_requires_context_future_result
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.context import RequiresContextFutureResult
    from typing import Callable

    test: RequiresContextFutureResult[Callable[[float], int], str, bool]
    x: RequiresContextFutureResult[float, str, bool]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int*, builtins.str, builtins.bool]'


- case: apply_future
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.future import Future

    def test(arg: float) -> int:
        ...

    x: Future[float]
    reveal_type(apply(x, Future.from_value(test)))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: apply_future_result
  disable_cache: true
  main: |
    from returns.methods import apply
    from returns.future import FutureResult
    from typing import Callable

    test: FutureResult[Callable[[float], int], str]
    x: FutureResult[float, str]

    reveal_type(apply(x, test))  # N: Revealed type is 'returns.future.FutureResult[builtins.int*, builtins.str]'


- case: apply_custom_type
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.methods import apply
    from returns.interfaces.applicative import Applicative1
    from returns.primitives.hkt import Kind1, SupportsKind1, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Applicative1[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def apply(
            self,
            container: Kind1['MyClass', Callable[[V], N]],
        ) -> 'MyClass[N]':
            return MyClass(dekind(container).value(self.value))

        @classmethod
        def from_value(cls, inner_value: N) -> MyClass[N]:
            return MyClass(inner_value)

    test: MyClass[Callable[[float], int]]
    x: MyClass[float]

    reveal_type(apply(x, test))  # N: Revealed type is 'main.MyClass[builtins.int*]'
