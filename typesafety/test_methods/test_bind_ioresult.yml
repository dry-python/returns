- case: bind_ioresult_wrong_first_type
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.context import RequiresContextFutureResult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: RequiresContextFutureResult[str, str, bool]
    bind_ioresult(x, test)  # E: Argument 2 to "bind_ioresult" has incompatible type "Callable[[float], IOResult[int, str]]"; expected "Callable[[str], IOResult[int, str]]"


- case: bind_ioresult_wrong_second_type
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.context import RequiresContextFutureResult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: RequiresContextFutureResult[float, int, bool]
    bind_ioresult(x, test)  # E: Argument 2 to "bind_ioresult" has incompatible type "Callable[[float], IOResult[int, str]]"; expected "Callable[[float], IOResult[int, int]]"


- case: bind_ioresult_wrong_type
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.context import RequiresContextResult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: RequiresContextResult[float, str, bool]
    bind_ioresult(x, test)  # E: Value of type variable "_IOResultLikeKind" of "bind_ioresult" cannot be "RequiresContextResult[Any, Any, Any]"


- case: bind_ioresult_ioresult
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: IOResult[float, str]
    reveal_type(bind_ioresult(x, test))  # N: Revealed type is 'returns.io.IOResult[builtins.int*, builtins.str]'


- case: bind_ioresult_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.context import RequiresContextIOResult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: RequiresContextIOResult[float, str, bool]
    reveal_type(bind_ioresult(x, test))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int*, builtins.str, builtins.bool]'


- case: bind_ioresult_requires_context_future_result
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.context import RequiresContextFutureResult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: RequiresContextFutureResult[float, str, bool]
    reveal_type(bind_ioresult(x, test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int*, builtins.str, builtins.bool]'


- case: bind_ioresult_future_result
  disable_cache: true
  main: |
    from returns.methods import bind_ioresult
    from returns.future import FutureResult
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_ioresult(x, test))  # N: Revealed type is 'returns.future.FutureResult[builtins.int*, builtins.str]'


- case: bind_ioresult_custom_type
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.ioresult import IOResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.io import IOResult
    from returns.methods import bind_ioresult

    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultBased2[_ValueType, _ErrorType],
    ):
        ...

    def test(a: int) -> IOResult[float, str]:
        ...

    x: MyClass[int, str]
    reveal_type(bind_ioresult(x, test))  # N: Revealed type is 'main.MyClass[builtins.float*, builtins.str]'
