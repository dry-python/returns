- case: bind_context2_wrong_env
  disable_cache: true
  main: |
    from returns.methods import bind_context2
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[str, int]:
        ...

    x: RequiresContext[float, str]
    bind_context2(x, test)
  out: |
    main:8: error: Argument 2 to "internal_bind_context2" has incompatible type "Callable[[float], RequiresContext[str, int]]"; expected "Callable[[float], RequiresContext[str, str]]"


- case: bind_context2_wrong_type
  disable_cache: true
  main: |
    from returns.methods import bind_context2
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[str, int]:
        ...

    x: RequiresContextResult[float, str, int]
    bind_context2(x, test)
  out: |
    main:8: error: Argument 2 to "internal_bind_context2" has incompatible type "Callable[[float], RequiresContext[str, int]]"; expected "Callable[[float], RequiresContext[str, str]]"
    main:8: error: Value of type variable "_Reader2Kind" of "internal_bind_context2" cannot be "RequiresContextResult[Any, Any, Any]"


- case: bind_context2_requires_context
  disable_cache: true
  main: |
    from returns.methods import bind_context2
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContext[float, str]
    reveal_type(bind_context2(x, test))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.int*, builtins.str]'


- case: bind_context2_custom_type
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.reader import ReaderBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.context import Reader
    from returns.methods import bind_context2

    _EnvType = TypeVar('_EnvType')
    _ReturnType = TypeVar('_ReturnType')

    class MyClass(
        SupportsKind2['MyClass', _ReturnType, _EnvType],
        ReaderBased2[_ReturnType, _EnvType],
    ):
        ...

    def test(a: int) -> Reader[float, str]:
        ...

    x: MyClass[int, str]
    reveal_type(bind_context2(x, test))  # N: Revealed type is 'main.MyClass[builtins.float*, builtins.str]'
