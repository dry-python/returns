- case: modify_env_wrong_env
  disable_cache: true
  main: |
    from returns.methods import modify_env
    from returns.context import RequiresContextResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextResult[float, bool, str]
    modify_env(x, test)
  out: |
    main:8: error: Argument 2 to "modify_env3" has incompatible type "Callable[[float], int]"; expected "Callable[[float], str]"


- case: modify_env_wrong_type
  disable_cache: true
  main: |
    from returns.methods import modify_env
    from returns.context import RequiresContext

    def test(arg: str) -> int:
        ...

    x: RequiresContext[float, int]
    modify_env(x, test)
  out: |
    main:8: error: Value of type variable "_Reader3Kind" of "modify_env3" cannot be "RequiresContext[Any, Any]"


- case: modify_env_alias
  disable_cache: true
  main: |
    from returns.methods import modify_env3
    from returns.context import RequiresContextResult

    def test(arg: str) -> int:
        ...

    x: RequiresContextResult[float, Exception, int]
    reveal_type(modify_env3(x, test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.float, builtins.Exception, builtins.str*]'



- case: modify_env_requires_context_result
  disable_cache: true
  main: |
    from returns.methods import modify_env
    from returns.context import RequiresContextResult

    def test(arg: str) -> int:
        ...

    x: RequiresContextResult[float, Exception, int]
    reveal_type(modify_env(x, test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.float, builtins.Exception, builtins.str*]'


- case: modify_env_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.methods import modify_env
    from returns.context import RequiresContextIOResult

    def test(arg: str) -> int:
        ...

    x: RequiresContextIOResult[float, Exception, int]
    reveal_type(modify_env(x, test))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.float, builtins.Exception, builtins.str*]'


- case: modify_env_requires_context_future_result
  disable_cache: true
  main: |
    from returns.methods import modify_env
    from returns.context import RequiresContextFutureResult

    def test(arg: str) -> int:
        ...

    x: RequiresContextFutureResult[float, Exception, int]
    reveal_type(modify_env(x, test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.float, builtins.Exception, builtins.str*]'


- case: modify_env_custom_type
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.reader import ReaderLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.methods import modify_env

    _EnvType = TypeVar('_EnvType')
    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _EnvType],
        ReaderLike3[_ValueType, _ErrorType, _EnvType],
    ):
        ...

    def test(arg: str) -> int:
        ...

    x: MyClass[int, Exception, int]
    reveal_type(modify_env(x, test))  # N: Revealed type is 'main.MyClass[builtins.int, builtins.Exception, builtins.str*]'
