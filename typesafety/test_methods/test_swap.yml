- case: swap_wrong_type
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.maybe import Maybe

    r: Maybe[str]

    swap(r)  # E: Value of type variable "_ResultLikeKind" of "swap" cannot be "Maybe[Any]"


- case: swap_result1
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.result import Result

    r: Result[int, str]

    reveal_type(swap(r))  # N: Revealed type is 'returns.result.Result*[builtins.str*, builtins.int*]'


- case: swap_result2
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.result import Result

    r: Result[int, str]

    reveal_type(swap(swap(r)))  # N: Revealed type is 'returns.result.Result*[builtins.int*, builtins.str*]'


- case: swap_ioresult
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.io import IOResult

    r: IOResult[int, str]

    reveal_type(swap(r))  # N: Revealed type is 'returns.io.IOResult*[builtins.str*, builtins.int*]'


- case: swap_future_result
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.future import FutureResult

    r: FutureResult[int, str]

    reveal_type(swap(r))  # N: Revealed type is 'returns.future.FutureResult*[builtins.str*, builtins.int*]'


- case: swap_reader_result
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.context import ReaderResult

    r: ReaderResult[int, str, bool]

    reveal_type(swap(r))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult*[builtins.str*, builtins.int*, builtins.bool*]'


- case: swap_reader_ioresult
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.context import ReaderIOResult

    r: ReaderIOResult[int, str, bool]

    reveal_type(swap(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult*[builtins.str*, builtins.int*, builtins.bool*]'


- case: swap_reader_future_result
  disable_cache: true
  main: |
    from returns.methods import swap
    from returns.context import ReaderFutureResult

    r: ReaderFutureResult[int, str, bool]

    reveal_type(swap(r))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult*[builtins.str*, builtins.int*, builtins.bool*]'


- case: swap_custom_type
  disable_cache: true
  main: |
    from returns.methods import swap
    from typing import TypeVar
    from returns.interfaces.specific.result import ResultLike2
    from returns.primitives.hkt import SupportsKind2

    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        ResultLike2[_ValueType, _ErrorType],
    ):
        ...

    x: MyClass[int, str]
    reveal_type(swap(x))  # N: Revealed type is 'main.MyClass*[builtins.str*, builtins.int*]'
