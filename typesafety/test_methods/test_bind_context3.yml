- case: bind_context_wrong_env
  disable_cache: true
  main: |
    from returns.methods import bind_context
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[str, int]:
        ...

    x: RequiresContextResult[float, bool, str]
    bind_context(x, test)
  out: |
    main:8: error: Argument 2 to "bind_context3" has incompatible type "Callable[[float], RequiresContext[str, int]]"; expected "Callable[[float], RequiresContext[str, str]]"


- case: bind_context_wrong_type
  disable_cache: true
  main: |
    from returns.methods import bind_context
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[str, int]:
        ...

    x: RequiresContext[float, int]
    bind_context(x, test)
  out: |
    main:8: error: Value of type variable "_Reader3Kind" of "bind_context3" cannot be "RequiresContext[Any, Any]"


- case: bind_context_alias
  disable_cache: true
  main: |
    from returns.methods import bind_context3
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextResult[float, Exception, str]
    reveal_type(bind_context3(x, test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, builtins.Exception, builtins.str]'


- case: bind_context_requires_context_result
  disable_cache: true
  main: |
    from returns.methods import bind_context
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextResult[float, Exception, str]
    reveal_type(bind_context(x, test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, builtins.Exception, builtins.str]'


- case: bind_context_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.methods import bind_context
    from returns.context import RequiresContext, RequiresContextIOResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextIOResult[float, Exception, str]
    reveal_type(bind_context(x, test))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int*, builtins.Exception, builtins.str]'


- case: bind_context_requires_context_future_result
  disable_cache: true
  main: |
    from returns.methods import bind_context
    from returns.context import RequiresContext, RequiresContextFutureResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextFutureResult[float, Exception, str]
    reveal_type(bind_context(x, test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int*, builtins.Exception, builtins.str]'


- case: bind_context_custom_type
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.reader import ReaderLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.context import Reader
    from returns.methods import bind_context

    _EnvType = TypeVar('_EnvType')
    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _EnvType],
        ReaderLike3[_ValueType, _ErrorType, _EnvType],
    ):
        ...

    def test(a: int) -> Reader[float, str]:
        ...

    x: MyClass[int, Exception, str]
    reveal_type(bind_context(x, test))  # N: Revealed type is 'main.MyClass[builtins.float*, builtins.Exception, builtins.str]'
