- case: map_variance
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.maybe import Maybe

    class A: ...
    class B(A): ...
    class C(B): ...

    def test(a: A) -> C:
        ...

    x: Maybe[B]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.maybe.Maybe[main.C*]'


- case: map_wrong_value_type
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.result import Result
    from returns.io import IOResult

    def test(arg: float) -> int:
        ...

    x: IOResult[str, str]
    reveal_type(map_(x, test))
  out: |
    main:9: error: Argument 2 to "internal_map" has incompatible type "Callable[[float], int]"; expected "Callable[[str], int]"
    main:9: note: Revealed type is 'returns.io.IOResult[builtins.int*, builtins.str]'


- case: map_io
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.io import IO

    def test(arg: float) -> int:
        ...

    x: IO[float]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.io.IO[builtins.int*]'


- case: map_maybe
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.maybe import Maybe

    def test(arg: float) -> int:
        ...

    x: Maybe[float]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.maybe.Maybe[builtins.int*]'


- case: map_result
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.result import Result

    def test(arg: float) -> int:
        ...

    x: Result[float, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.result.Result[builtins.int*, builtins.str]'


- case: map_ioresult
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.io import IOResult

    def test(arg: float) -> int:
        ...

    x: IOResult[float, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.io.IOResult[builtins.int*, builtins.str]'


- case: map_requires_context
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.context import RequiresContext

    def test(arg: float) -> int:
        ...

    x: RequiresContext[float, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.int*, builtins.str]'


- case: map_requires_context_result
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.context import RequiresContextResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextResult[float, bool, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, builtins.bool, builtins.str]'


- case: map_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextIOResult[float, bool, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int*, builtins.bool, builtins.str]'


- case: map_requires_context_future_result
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.context import RequiresContextFutureResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int*, builtins.bool, builtins.str]'


- case: map_future
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.future import Future

    def test(arg: float) -> int:
        ...

    x: Future[float]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: map_future_result
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.future import FutureResult

    def test(arg: float) -> int:
        ...

    x: FutureResult[float, str]
    reveal_type(map_(x, test))  # N: Revealed type is 'returns.future.FutureResult[builtins.int*, builtins.str]'


- case: map_custom_type
  disable_cache: true
  main: |
    from returns.methods import map_
    from returns.primitives.hkt import SupportsKind1, dekind
    from returns.interfaces.mappable import Mappable1
    from typing import Callable, TypeVar

    T = TypeVar('T')
    N = TypeVar('N')

    class MyOwn(
        SupportsKind1['MyOwn', T],
        Mappable1[T],
    ):
        def __init__(self, value: T) -> None:
            self.value = value

        def map(
            self, function: Callable[[T], N],
        ) -> 'MyOwn[N]':
            return MyOwn(function(self.value))

    def test(arg: float) -> int:
        ...

    x: MyOwn[float]
    reveal_type(map_(x, test))  # N: Revealed type is 'main.MyOwn[builtins.int*]'
