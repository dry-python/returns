- case: context_correct_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContext

    first: RequiresContext[TypeError, int]  # we can only cast return type
    second: RequiresContext[Exception, int] = first

    reveal_type(second)  # N: Revealed type is "returns.context.requires_context.RequiresContext[builtins.Exception, builtins.int]"


- case: context_wrong_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContext

    first: RequiresContext[ValueError, TypeError]  # we can only cast return type
    second: RequiresContext[Exception, Exception] = first
  out: |
    main:4: error: Incompatible types in assignment (expression has type "RequiresContext[ValueError, TypeError]", variable has type "RequiresContext[Exception, Exception]")


- case: context_covariant_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContext

    class A(object):
        a = 1

    class B(A):
        b = 2

    class C(A):
        c = 3

    def func() -> RequiresContext[int, B]:
        return RequiresContext(lambda deps: deps.a + deps.b)

    def second(a: int) -> RequiresContext[int, A]:
        return RequiresContext(lambda deps: deps.a + a)

    def third(a: int) -> RequiresContext[int, C]:
        return RequiresContext(lambda deps: deps.c + a)

    reveal_type(func().bind(second))
    reveal_type(func().bind(third))
  out: |
    main:21: note: Revealed type is "returns.context.requires_context.RequiresContext[builtins.int, main.B]"
    main:21: error: Argument 1 to "bind" of "RequiresContext" has incompatible type "Callable[[int], RequiresContext[int, A]]"; expected "Callable[[int], KindN[RequiresContext[Any, Any], int, B, Any]]"
    main:22: note: Revealed type is "returns.context.requires_context.RequiresContext[builtins.int, main.B]"
    main:22: error: Argument 1 to "bind" of "RequiresContext" has incompatible type "Callable[[int], RequiresContext[int, C]]"; expected "Callable[[int], KindN[RequiresContext[Any, Any], int, B, Any]]"
