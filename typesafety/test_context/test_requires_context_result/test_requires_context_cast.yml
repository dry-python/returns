- case: requires_context_result_success_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextResult

    first: RequiresContextResult[object, Exception, str] = RequiresContextResult.from_value(1)
    reveal_type(first)  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.object, builtins.Exception, builtins.str]"


- case: requires_context_result_failure_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextResult

    first: RequiresContextResult[object, Exception, str] = RequiresContextResult.from_failure(TypeError())
    reveal_type(first)  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.object, builtins.Exception, builtins.str]"


- case: requires_context_result_env_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextResult

    first: RequiresContextResult[object, Exception, object]
    second: RequiresContextResult[object, Exception, str] = first

    reveal_type(second)  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.object, builtins.Exception, builtins.str]"


- case: requires_context_result_wrong_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextResult

    first: RequiresContextResult[ValueError, TypeError, IndexError]
    second: RequiresContextResult[Exception, Exception, Exception] = first
  out: |
    main:4: error: Incompatible types in assignment (expression has type "RequiresContextResult[ValueError, TypeError, IndexError]", variable has type "RequiresContextResult[Exception, Exception, Exception]")
