- case: requires_context_result_success
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    reveal_type(RequiresContextResult.from_value(1))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, Any, Any]'


- case: requires_context_result_failure
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    reveal_type(RequiresContextResult.from_failure(1))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[Any, builtins.int*, Any]'


- case: requires_context_result_from_iterable1
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult
    from typing import Iterable

    x: Iterable[RequiresContextResult[int, float, str]]

    reveal_type(RequiresContextResult.from_iterable(x))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[typing.Sequence[builtins.int*], builtins.float*, builtins.str*]'


- case: requires_context_result_from_iterable2
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult
    from returns.primitives.iterables import CollectAll
    from typing import Iterable

    x: Iterable[RequiresContextResult[int, float, str]]

    reveal_type(RequiresContextResult.from_iterable(x, CollectAll))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[typing.Sequence[builtins.int*], builtins.float*, builtins.str*]'


- case: requires_context_result_result
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult
    from returns.result import Result

    r: Result[int, str]

    reveal_type(RequiresContextResult.from_result(r))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, builtins.str*, Any]'


- case: requires_context_result_typecast
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult, RequiresContext
    from returns.result import Result

    r: RequiresContext[Result[int, str], float]

    reveal_type(RequiresContextResult.from_typecast(r))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int*, builtins.str*, builtins.float*]'


- case: requires_context_result_successful_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult, RequiresContext

    r: RequiresContext[str, float]

    reveal_type(RequiresContextResult.from_context(r))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.str*, Any, builtins.float*]'


- case: requires_context_result_failed_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult, RequiresContext

    r: RequiresContext[str, float]

    reveal_type(RequiresContextResult.from_failed_context(r))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[Any, builtins.str*, builtins.float*]'
