- case: requires_context_future_result_call
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]

    reveal_type(x('a'))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.float]"


- case: requires_context_future_result_getattr
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, str, bool]
    x.missing  # E: "RequiresContextFutureResult[int, str, bool]" has no attribute "missing"  [attr-defined]


- case: requires_context_future_result_swap
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]

    reveal_type(x.swap())  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.float, builtins.int, builtins.str]"


- case: requires_context_future_result_map
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]

    reveal_type(x.map(bool))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_apply
  disable_cache: false
  main: |
    from typing import Callable
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]
    y: RequiresContextFutureResult[Callable[[int], bool], float, str]

    reveal_type(x.apply(y))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> RequiresContextFutureResult[bool, float, str]:
        ...

    reveal_type(x.bind(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_awaitable
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    async def bind_awaitable(arg: int) -> float:
        ...

    first: RequiresContextFutureResult[int, str, bool]

    reveal_type(first.bind_awaitable(bind_awaitable))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.float, builtins.str, builtins.bool]"


- case: requires_context_future_result_bind_async
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    async def bind_async(arg: int) -> RequiresContextFutureResult[float, str, bool]:
        ...

    first: RequiresContextFutureResult[int, str, bool]

    reveal_type(first.bind_async(bind_async))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.float, builtins.str, builtins.bool]"


- case: requires_context_future_result_bind_result
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.result import Result

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> Result[bool, float]:
        ...

    reveal_type(x.bind_result(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_ioresult
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.io import IOResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> IOResult[bool, float]:
        ...

    reveal_type(x.bind_ioresult(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_io
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.io import IO

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> IO[bool]:
        ...

    reveal_type(x.bind_io(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_future
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.future import Future

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> Future[bool]:
        ...

    reveal_type(x.bind_future(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_future_result
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.future import FutureResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> FutureResult[bool, float]:
        ...

    reveal_type(x.bind_future_result(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_async_future
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.future import Future

    x: RequiresContextFutureResult[int, float, str]

    async def test(param: int) -> Future[bool]:
        ...

    reveal_type(x.bind_async_future(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_async_future_result
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.future import FutureResult

    x: RequiresContextFutureResult[int, float, str]

    async def test(param: int) -> FutureResult[bool, float]:
        ...

    reveal_type(x.bind_async_future_result(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_context
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult, RequiresContext

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> RequiresContext[bool, str]:
        ...

    reveal_type(x.bind_context(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_context_result
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult, RequiresContextResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> RequiresContextResult[bool, float, str]:
        ...

    reveal_type(x.bind_context_result(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_bind_context_ioresult
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult, RequiresContextIOResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: int) -> RequiresContextIOResult[bool, float, str]:
        ...

    reveal_type(x.bind_context_ioresult(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float, builtins.str]"


- case: requires_context_future_result_lash
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: float) -> RequiresContextFutureResult[int, bool, str]:
        ...

    reveal_type(x.lash(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: requires_context_future_result_alt
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[int, float, str]

    def test(param: float) -> bool:
        ...

    reveal_type(x.alt(test))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: requires_context_future_result_modify_env
  disable_cache: false
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[float, bool, int]
    reveal_type(first.modify_env(int)('1'))  # N: Revealed type is "returns.future.FutureResult[builtins.float, builtins.bool]"
