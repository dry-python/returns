- case: requires_context_ioresult_success_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextIOResult

    first: RequiresContextIOResult[object, Exception, str] = RequiresContextIOResult.from_value(1)
    reveal_type(first)  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.object, builtins.Exception, builtins.str]"


- case: requires_context_ioresult_failure_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextIOResult

    first: RequiresContextIOResult[object, Exception, str] = RequiresContextIOResult.from_failure(TypeError())
    reveal_type(first)  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.object, builtins.Exception, builtins.str]"


- case: requires_context_ioresult_env_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextIOResult

    first: RequiresContextIOResult[object, Exception, object]
    second: RequiresContextIOResult[object, Exception, str] = first

    reveal_type(second)  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.object, builtins.Exception, builtins.str]"


- case: requires_context_ioresult_wrong_cast
  disable_cache: false
  main: |
    from returns.context import RequiresContextIOResult

    first: RequiresContextIOResult[ValueError, TypeError, IndexError]
    second: RequiresContextIOResult[Exception, Exception, Exception] = first
  out: |
    main:4: error: Incompatible types in assignment (expression has type "RequiresContextIOResult[ValueError, TypeError, IndexError]", variable has type "RequiresContextIOResult[Exception, Exception, Exception]")  [assignment]
