- case: requires_context_ioresult_success
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult

    reveal_type(RequiresContextIOResult.from_value(1))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[Any, builtins.int*, Any]'


- case: requires_context_ioresult_failure
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult

    reveal_type(RequiresContextIOResult.from_failure(1))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[Any, Any, builtins.int*]'


- case: requires_context_ioresult_from_iterable
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult
    from typing import Iterable

    x: Iterable[RequiresContextIOResult[str, int, float]]

    reveal_type(RequiresContextIOResult.from_iterable(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.str*, typing.Sequence[builtins.int*], builtins.float*]'


- case: requires_context_ioresult_result
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult
    from returns.result import Result

    r: Result[int, str]

    reveal_type(RequiresContextIOResult.from_result(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[Any, builtins.int*, builtins.str*]'


- case: requires_context_ioresult_ioresult
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult
    from returns.io import IOResult

    r: IOResult[int, str]

    reveal_type(RequiresContextIOResult.from_ioresult(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[Any, builtins.int*, builtins.str*]'


- case: requires_context_ioresult_typecast
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult, RequiresContext
    from returns.io import IOResult

    r: RequiresContext[float, IOResult[int, str]]

    reveal_type(RequiresContextIOResult.from_typecast(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.float*, builtins.int*, builtins.str*]'


- case: requires_context_ioresult_successful_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult, RequiresContext

    r: RequiresContext[float, str]

    reveal_type(RequiresContextIOResult.from_context(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.float*, builtins.str*, Any]'


- case: requires_context_ioresult_failed_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult, RequiresContext

    r: RequiresContext[float, str]

    reveal_type(RequiresContextIOResult.from_failed_context(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.float*, Any, builtins.str*]'


- case: requires_context_ioresult_from_result_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextIOResult, RequiresContextResult

    r: RequiresContextResult[float, int, str]

    reveal_type(RequiresContextIOResult.from_result_context(r))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.float*, builtins.int*, builtins.str*]'
