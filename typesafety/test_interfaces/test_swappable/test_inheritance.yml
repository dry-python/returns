- case: swappable_inheritance_correct2
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.swappable import Swappable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')

    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        Swappable2[_FirstType, _SecondType],
    ):
        def swap(self) -> MyClass[_SecondType, _FirstType]:
            ...


- case: swappable_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar, final
    from returns.interfaces.swappable import Swappable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')

    @final
    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        Swappable2[_FirstType, _SecondType],
    ):
        ...
  out: |
    main:9: error: Final class main.MyClass has abstract attributes "alt", "map", "swap"  [misc]


- case: swappable_inheritance_incorrect2
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.swappable import Swappable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')
    _UpdatedType = TypeVar('_UpdatedType')

    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        Swappable2[_FirstType, _SecondType],
    ):
        def swap(self) -> MyClass[_FirstType, _SecondType]:
            ...
  out: |
    main:13: error: Return type "MyClass[_FirstType, _SecondType]" of "swap" incompatible with return type "KindN[MyClass[_FirstType, _SecondType], _SecondType, _FirstType, NoReturn]" in supertype "SwappableN"  [override]
