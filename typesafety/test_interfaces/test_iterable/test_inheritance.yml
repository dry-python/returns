- case: iterable_inheritance_correct1
  disable_cache: true
  main: |
    from typing import Any, Type, TypeVar, Iterable, Sequence
    from returns.interfaces.iterable import Iterable1
    from returns.primitives.hkt import Kind1, SupportsKind1, dekind
    from returns._generated.iterable import iterable_kind
    from returns.primitives.iterables import BaseIterableStrategyN, FailFast

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Iterable1[V]):
        @classmethod
        def from_iterable(
            cls,
            inner_value: Iterable[Kind1['MyClass', N]],
            strategy: Type[BaseIterableStrategyN[N, Any, Any]] = FailFast,
        ) -> MyClass[Sequence[N]]:
            ...

    x: Iterable[MyClass[str]]
    reveal_type(MyClass.from_iterable(x))  # N: Revealed type is 'main.MyClass[typing.Sequence[builtins.str*]]'


- case: iterable_inheritance_correct2
  disable_cache: true
  main: |
    from typing import Any, Type, TypeVar, Iterable, Sequence
    from returns.interfaces.iterable import Iterable2
    from returns.primitives.hkt import SupportsKind2, Kind2, dekind
    from returns._generated.iterable import iterable_kind
    from returns.primitives.iterables import BaseIterableStrategyN, FailFast

    V = TypeVar('V')
    E = TypeVar('E')
    N = TypeVar('N')
    I = TypeVar('I')

    class MyClass(SupportsKind2['MyClass', V, E], Iterable2[V, E]):
        @classmethod
        def from_iterable(
            cls,
            inner_value: Iterable[Kind2['MyClass', N, I]],
            strategy: Type[BaseIterableStrategyN],
        ) -> MyClass[Sequence[N], I]:
            ...

    x: Iterable[MyClass[str, int]]
    reveal_type(MyClass.from_iterable(x, FailFast))  # N: Revealed type is 'main.MyClass[typing.Sequence[builtins.str*], builtins.int*]'


- case: iterable_inheritance_correct3
  disable_cache: true
  main: |
    from typing import Any, Type, TypeVar, Iterable, Sequence
    from returns.interfaces.iterable import Iterable3
    from returns.primitives.hkt import SupportsKind3, Kind3, dekind
    from returns._generated.iterable import iterable_kind
    from returns.primitives.iterables import BaseIterableStrategyN, CollectAll

    V = TypeVar('V')
    E = TypeVar('E')
    T = TypeVar('T')
    N = TypeVar('N')
    I = TypeVar('I')
    U = TypeVar('U')

    class MyClass(SupportsKind3['MyClass', V, E, T], Iterable3[V, E, T]):
        @classmethod
        def from_iterable(
            cls,
            inner_value: Iterable[Kind3['MyClass', N, I, U]],
            strategy: Type[BaseIterableStrategyN[N, I, U]] = CollectAll,
        ) -> MyClass[Sequence[N], I, U]:
            ...

    x: Iterable[MyClass[str, int, bool]]
    reveal_type(MyClass.from_iterable(x))  # N: Revealed type is 'main.MyClass[typing.Sequence[builtins.str*], builtins.int*, builtins.bool*]'


- case: iterable_inheritance_missing
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.iterable import Iterable1
    from returns.primitives.hkt import SupportsKind1

    V = TypeVar('V')

    class MyClass(SupportsKind1['MyClass', V], Iterable1[V]):
        ...

    MyClass()
  out: |
    main:10: error: Cannot instantiate abstract class 'MyClass' with abstract attribute 'from_iterable'


- case: iterable_inheritance_wrong1
  disable_cache: true
  main: |
    from typing import TypeVar, Iterable
    from returns.interfaces.iterable import Iterable1
    from returns.primitives.hkt import SupportsKind1, Kind1

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Iterable1[V]):
        @classmethod
        def from_iterable(
            cls,
            inner_value: Iterable[Kind1['MyClass', N]],
        ) -> MyClass[N]:
            ...
  out: |
    main:10: error: Signature of "from_iterable" incompatible with supertype "IterableN"


- case: iterable_inheritance_wrong2
  disable_cache: true
  main: |
    from typing import Any, Type, TypeVar, Iterable, Sequence
    from returns.interfaces.iterable import Iterable2
    from returns.primitives.hkt import SupportsKind2, Kind2
    from returns.primitives.iterables import BaseIterableStrategyN

    V = TypeVar('V')
    N = TypeVar('N')
    E = TypeVar('E')
    I = TypeVar('I')

    class MyClass(SupportsKind2['MyClass', V, E], Iterable2[V, E]):
        @classmethod
        def from_iterable(
            cls,
            inner_value: Iterable[Kind2['MyClass', V, E]],
            strategy: Type[BaseIterableStrategyN[V, E, Any]],
        ) -> MyClass[Sequence[V], E]:
            ...
  out: |
    main:13: error: Argument 1 of "from_iterable" is incompatible with supertype "IterableN"; supertype defines the argument type as "Iterable[KindN[MyClass[V, E], _NewFirstType, _NewSecondType, _NewThirdType]]"
    main:13: error: Argument 2 of "from_iterable" is incompatible with supertype "IterableN"; supertype defines the argument type as "Type[BaseIterableStrategyN[_NewFirstType, _NewSecondType, _NewThirdType]]"
    main:13: error: Return type "MyClass[Sequence[V], E]" of "from_iterable" incompatible with return type "KindN[MyClass[V, E], Sequence[_NewFirstType], _NewSecondType, _NewThirdType]" in supertype "IterableN"
    main:13: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:13: note: This violates the Liskov substitution principle
