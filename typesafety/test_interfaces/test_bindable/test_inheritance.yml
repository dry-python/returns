- case: bindable_inheritance_correct1
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.bindable import Bindable1
    from returns.primitives.hkt import Kind1, SupportsKind1, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Bindable1[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def bind(
            self,
            function: Callable[[V], Kind1['MyClass', N]],
        ) -> 'MyClass[N]':
            return dekind(function(self.value))

    def test(arg: str) -> MyClass[int]:
        ...

    reveal_type(MyClass('1').bind(test))  # N: Revealed type is "main.MyClass[builtins.int]"


- case: bindable_inheritance_correct2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.bindable import Bindable2
    from returns.primitives.hkt import Kind2, SupportsKind2, dekind

    V = TypeVar('V')
    T = TypeVar('T')
    N = TypeVar('N')

    class MyClass(SupportsKind2['MyClass', V, T], Bindable2[V, T]):
        def __init__(self, value: V, other: T) -> None:
            self.value = value
            self.other = other

        def bind(
            self,
            function: Callable[[V], Kind2['MyClass', N, T]],
        ) -> 'MyClass[N, T]':
            return dekind(function(self.value))

    def test(arg: str) -> MyClass[int, str]:
        ...

    reveal_type(MyClass('1', 'a').bind(test))  # N: Revealed type is "main.MyClass[builtins.int, builtins.str]"


- case: bindable_inheritance_correct3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.bindable import Bindable3
    from returns.primitives.hkt import Kind3, SupportsKind3, dekind

    V = TypeVar('V')
    T = TypeVar('T')
    K = TypeVar('K')
    N = TypeVar('N')

    class MyClass(SupportsKind3['MyClass', V, T, K], Bindable3[V, T, K]):
        def __init__(self, value: V, other: T, last: K) -> None:
            self.value = value
            self.other = other
            self.last = last

        def bind(
            self,
            function: Callable[[V], Kind3['MyClass', N, T, K]],
        ) -> 'MyClass[N, T, K]':
            return dekind(function(self.value))

    def test(arg: str) -> MyClass[int, str, bool]:
        ...

    reveal_type(MyClass('1', 'a', True).bind(test))  # N: Revealed type is "main.MyClass[builtins.int, builtins.str, builtins.bool]"


- case: bindable_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.bindable import Bindable1
    from returns.primitives.hkt import SupportsKind1

    V = TypeVar('V')

    class MyClass(SupportsKind1['MyClass', V], Bindable1[V]):
        ...

    MyClass()
  out: |
    main:10: error: Cannot instantiate abstract class "MyClass" with abstract attribute "bind"  [abstract]


- case: bindable_inheritance_wrong1
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.bindable import Bindable1
    from returns.primitives.hkt import Kind1, SupportsKind1

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Bindable1[V]):
        def bind(
            self,
            function: Callable[[V], Kind1['MyClass', V]],
        ) -> 'MyClass[V]':
            ...
  out: |
    main:9: error: Return type "MyClass[V]" of "bind" incompatible with return type "KindN[MyClass[V], _UpdatedType, NoReturn, NoReturn]" in supertype "BindableN"  [override]
    main:11: error: Argument 1 of "bind" is incompatible with supertype "BindableN"; supertype defines the argument type as "Callable[[V], KindN[MyClass[V], _UpdatedType, NoReturn, NoReturn]]"  [override]
    main:11: note: This violates the Liskov substitution principle
    main:11: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides


- case: bindable_inheritance_wrong2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.bindable import Bindable2
    from returns.primitives.hkt import Kind2, SupportsKind2

    V = TypeVar('V')
    T = TypeVar('T')
    N = TypeVar('N')

    class MyClass(SupportsKind2['MyClass', V, T], Bindable2[V, T]):
        def bind(
            self,
            function: Callable[[V], Kind2['MyClass', V, T]],
        ) -> 'MyClass[V, T]':
            ...
  out: |
    main:10: error: Return type "MyClass[V, T]" of "bind" incompatible with return type "KindN[MyClass[V, T], _UpdatedType, T, NoReturn]" in supertype "BindableN"  [override]
    main:12: error: Argument 1 of "bind" is incompatible with supertype "BindableN"; supertype defines the argument type as "Callable[[V], KindN[MyClass[V, T], _UpdatedType, T, NoReturn]]"  [override]
    main:12: note: This violates the Liskov substitution principle
    main:12: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides


- case: bindable_inheritance_wrong3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.bindable import Bindable3
    from returns.primitives.hkt import Kind3, SupportsKind3

    V = TypeVar('V')
    T = TypeVar('T')
    E = TypeVar('E')
    N = TypeVar('N')

    class MyClass(SupportsKind3['MyClass', V, T, E], Bindable3[V, T, E]):
        def bind(
            self,
            function: Callable[[V], Kind3['MyClass', V, T, N]],
        ) -> 'MyClass[V, T, E]':
            ...
  out: |
    main:11: error: Return type "MyClass[V, T, E]" of "bind" incompatible with return type "KindN[MyClass[V, T, E], _UpdatedType, T, E]" in supertype "BindableN"  [override]
    main:13: error: Argument 1 of "bind" is incompatible with supertype "BindableN"; supertype defines the argument type as "Callable[[V], KindN[MyClass[V, T, E], _UpdatedType, T, E]]"  [override]
    main:13: note: This violates the Liskov substitution principle
    main:13: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
