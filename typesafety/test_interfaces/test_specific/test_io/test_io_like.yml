- case: io_inheritance_correct
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.specific.io import IOLike1
    from returns.primitives.hkt import SupportsKind1
    from returns.io import IO

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    class MyClass(
        SupportsKind1['MyClass', _ValueType],
        IOLike1[_ValueType],
    ):
        def bind_io(
            self,
            function: Callable[[_ValueType], IO[_NewValueType]],
        ) -> MyClass[_NewValueType]:
            ...

        @classmethod
        def from_io(
            self, inner_value: IO[_NewValueType],
        ) -> MyClass[_NewValueType]:
            ...

    def test(a: int) -> IO[float]:
        ...

    x: IO[int]
    reveal_type(MyClass.from_io(x).bind_io(test))  # N: Revealed type is 'main.MyClass[builtins.float*]'


- case: io_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.io import IOLike1
    from returns.primitives.hkt import SupportsKind1

    _ValueType = TypeVar('_ValueType')

    @final
    class MyClass(
        SupportsKind1['MyClass', _ValueType],
        IOLike1[_ValueType],
    ):
        ...
  out: |
    main:9: error: Final class main.MyClass has abstract attributes "apply", "bind", "bind_io", "from_io", "from_iterable", "from_value", "map"


- case: io_inheritance_wrong
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.specific.io import IOLike1
    from returns.primitives.hkt import SupportsKind1
    from returns.io import IO

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    class MyClass(
        SupportsKind1['MyClass', _ValueType],
        IOLike1[_ValueType],
    ):
        def bind_io(
            self,
            function: Callable[[_ValueType], IO[_ValueType]],
        ) -> MyClass[_ValueType]:
            ...

        def from_io(
            self, inner_value: IO[_NewValueType],
        ) -> MyClass[_NewValueType]:
            ...
  out: |
    main:13: error: Argument 1 of "bind_io" is incompatible with supertype "IOLikeN"; supertype defines the argument type as "Callable[[_ValueType], IO[_UpdatedType]]"
    main:13: error: Return type "MyClass[_ValueType]" of "bind_io" incompatible with return type "KindN[MyClass[_ValueType], _UpdatedType, NoReturn, NoReturn]" in supertype "IOLikeN"
    main:13: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:13: note: This violates the Liskov substitution principle
    main:19: error: Signature of "from_io" incompatible with supertype "IOLikeN"
