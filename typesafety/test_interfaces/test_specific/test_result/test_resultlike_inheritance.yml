- case: result_inheritance_correct2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.result import ResultLike2
    from returns.primitives.hkt import SupportsKind2
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        ResultLike2[_ValueType, _ErrorType],
    ):
        def bind_result(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType]:
            ...

        @classmethod
        def from_result(
            self, inner_value: Result[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...

    def test(a: int) -> Result[float, str]:
        ...

    x: Result[int, str]
    reveal_type(MyClass.from_result(x).bind_result(test))  # N: Revealed type is "main.MyClass[builtins.float, builtins.str]"


- case: result_inheritance_correct3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.result import ResultLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')
    _T = TypeVar('_T')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _T],
        ResultLike3[_ValueType, _ErrorType, _T],
    ):
        def bind_result(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, _T]:
            ...

        @classmethod
        def from_result(
            self, inner_value: Result[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType, Any]:
            ...

    def test(a: int) -> Result[float, str]:
        ...

    x: Result[int, str]
    reveal_type(MyClass.from_result(x).bind_result(test))  # N: Revealed type is "main.MyClass[builtins.float, builtins.str, Any]"


- case: result_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.result import ResultLike2
    from returns.primitives.hkt import SupportsKind2

    V = TypeVar('V')
    N = TypeVar('N')

    @final
    class MyClass(SupportsKind2['MyClass', V, N], ResultLike2[V, N]):
        ...
  out: |
    main:10: error: Final class main.MyClass has abstract attributes "alt", "apply", "bind", "bind_result", "from_failure", "from_result", "from_value", "lash", "map", "swap"


- case: result_inheritance_wrong2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.specific.result import ResultLike2
    from returns.primitives.hkt import SupportsKind2
    from returns.result import Result

    _ValueType = TypeVar('_ValueType', covariant=True)
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType', covariant=True)
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        ResultLike2[_ValueType, _ErrorType],
    ):
        def bind_result(
            self,
            function: Callable[
                [_ValueType],
                Result[_ValueType, _ErrorType],
            ],
        ) -> MyClass[_ValueType, _ErrorType]:
            ...

        def from_result(
            self, inner_value: Result[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...
  out: |
    main:17: error: Argument 1 of "bind_result" is incompatible with supertype "ResultLikeN"; supertype defines the argument type as "Callable[[_ValueType], Result[_UpdatedType, _ErrorType]]"
    main:17: note: This violates the Liskov substitution principle
    main:17: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:17: error: Return type "MyClass[_ValueType, _ErrorType]" of "bind_result" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType], _UpdatedType, _ErrorType, NoReturn]" in supertype "ResultLikeN"
    main:26: error: Signature of "from_result" incompatible with supertype "ResultLikeN"
    main:26: note:      Superclass:
    main:26: note:          def [_ValueType, _ErrorType] from_result(cls, inner_value: Result[_ValueType, _ErrorType]) -> KindN[MyClass[_ValueType, _ErrorType], _ValueType, _ErrorType, NoReturn]
    main:26: note:      Subclass:
    main:26: note:          def [_NewValueType, _NewErrorType] from_result(self, inner_value: Result[_NewValueType, _NewErrorType]) -> MyClass[_NewValueType, _NewErrorType]

- case: result_inheritance_wrong3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.result import ResultLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.result import Result

    _ValueType = TypeVar('_ValueType', covariant=True)
    _NewValueType = TypeVar('_NewValueType')
    _T = TypeVar('_T')

    # Result related:
    _ErrorType = TypeVar('_ErrorType', covariant=True)
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _T],
        ResultLike3[_ValueType, _ErrorType, _T],
    ):
        def bind_result(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, str]:
            ...

        @classmethod
        def from_result(
            self, inner_value: Result[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType, bool]:
            ...
  out: |
    main:18: error: Return type "MyClass[_NewValueType, _ErrorType, str]" of "bind_result" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _T], _UpdatedType, _ErrorType, _T]" in supertype "ResultLikeN"
    main:28: error: Return type "MyClass[_NewValueType, _NewErrorType, bool]" of "from_result" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _T], _ValueType, _ErrorType, _T]" in supertype "ResultLikeN"
