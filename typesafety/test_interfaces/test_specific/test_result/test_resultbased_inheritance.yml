- case: result_inheritance_correct2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.result import ResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        ResultBased2[_ValueType, _ErrorType],
    ):
        def swap(self) -> MyClass[_ErrorType, _ValueType]:
            ...

        def bind_result(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType]:
            ...

        def unwrap(self) -> _ValueType:
            ...

        def failure(self) -> _ErrorType:
            ...

        @classmethod
        def from_result(
            self, inner_value: Result[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...

        @classmethod
        def from_failure(
            cls, inner_value: _NewErrorType,
        ) -> MyClass[Any, _NewErrorType]:
            ...

    def test(a: int) -> Result[float, str]:
        ...

    x: Result[int, str]
    reveal_type(MyClass.from_result(x).bind_result(test))  # N: Revealed type is 'main.MyClass[builtins.float*, builtins.str]'


- case: result_inheritance_correct3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.result import ResultBased3
    from returns.primitives.hkt import SupportsKind3
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')
    _T = TypeVar('_T')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _T],
        ResultBased3[_ValueType, _ErrorType, _T],
    ):
        def swap(self) -> MyClass[_ErrorType, _ValueType, _T]:
            ...

        def bind_result(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, _T]:
            ...

        def unwrap(self) -> _ValueType:
            ...

        def failure(self) -> _ErrorType:
            ...

        @classmethod
        def from_result(
            self, inner_value: Result[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType, Any]:
            ...

        @classmethod
        def from_failure(
            cls, inner_value: _NewErrorType,
        ) -> MyClass[Any, _NewErrorType, Any]:
            ...

    def test(a: int) -> Result[float, str]:
        ...

    x: Result[int, str]
    reveal_type(MyClass.from_result(x).bind_result(test))  # N: Revealed type is 'main.MyClass[builtins.float*, builtins.str, Any]'


- case: result_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.result import ResultBased2
    from returns.primitives.hkt import SupportsKind2

    V = TypeVar('V')
    N = TypeVar('N')

    @final
    class MyClass(SupportsKind2['MyClass', V, N], ResultBased2[V, N]):
        ...
  out: |
    main:10: error: Final class main.MyClass has abstract attributes "alt", "apply", "bind", "bind_result", "equals", "failure", "from_failure", "from_result", "from_value", "lash", "map", "swap", "unwrap"


- case: result_inheritance_wrong
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.specific.result import ResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.result import Result

    _ValueType = TypeVar('_ValueType', covariant=True)
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType', covariant=True)
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        ResultBased2[_ValueType, _ErrorType],
    ):
        def unwrap(self) -> _ErrorType:
            ...

        def failure(self) -> _ValueType:
            ...
  out: |
    main:17: error: Return type "_ErrorType" of "unwrap" incompatible with return type "_ValueType" in supertype "Unwrappable"
    main:20: error: Return type "_ValueType" of "failure" incompatible with return type "_ErrorType" in supertype "Unwrappable"
