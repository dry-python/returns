- case: reader_inheritance_correct
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, ClassVar, Union, Any
    from returns.interfaces.specific.reader import ReaderLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.context import Reader, NoDeps

    _EnvType = TypeVar('_EnvType', contravariant=True)
    _NewEnvType = TypeVar('_NewEnvType')
    _ValueType = TypeVar('_ValueType', covariant=True)
    _NewValueType = TypeVar('_NewValueType')
    _ErrorType = TypeVar('_ErrorType', covariant=True)

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _EnvType],
        ReaderLike3[_ValueType, _ErrorType, _EnvType],
    ):
        no_args: ClassVar[NoDeps] = object()

        def __call__(self, deps: _EnvType) -> Union[_ValueType, _ErrorType]:
            ...

        def bind_context(
            self,
            function: Callable[
                [_ValueType],
                Reader[_NewValueType, _EnvType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, _EnvType]:
            ...

        def modify_env(
            self,
            function: Callable[[_NewEnvType], _EnvType],
        ) -> 'MyClass[_ValueType, _ErrorType, _NewEnvType]':
            ...

        @classmethod
        def ask(cls) -> 'MyClass[_EnvType, _ErrorType, _EnvType]':
            ...

        @classmethod
        def from_context(
            self, inner_value: Reader[_NewValueType, _NewEnvType],
        ) -> MyClass[_NewValueType, Any, _NewEnvType]:
            ...

    def test(a: int) -> Reader[float, str]:
        ...

    x: Reader[int, str]
    reveal_type(MyClass.from_context(x).bind_context(test))  # N: Revealed type is "main.MyClass[builtins.float*, Any, builtins.str]"


- case: reader_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.reader import ReaderLike3
    from returns.primitives.hkt import SupportsKind3

    _EnvType = TypeVar('_EnvType')
    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    @final
    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _EnvType],
        ReaderLike3[_ValueType, _ErrorType, _EnvType],
    ):
        ...
  out: |
    main:11: error: Final class main.MyClass has abstract attributes "apply", "ask", "bind", "bind_context", "from_context", "from_value", "map", "modify_env", "no_args"


- case: reader_inheritance_wrong
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, ClassVar, Any
    from returns.interfaces.specific.reader import ReaderLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.context import Reader

    _EnvType = TypeVar('_EnvType', contravariant=True)
    _NewEnvType = TypeVar('_NewEnvType')
    _ValueType = TypeVar('_ValueType', covariant=True)
    _NewValueType = TypeVar('_NewValueType')
    _ErrorType = TypeVar('_ErrorType', covariant=True)

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _EnvType],
        ReaderLike3[_ValueType, _ErrorType, _EnvType],
    ):
        def __call__(self, deps: _ValueType) -> Any:
            ...

        def bind_context(
            self,
            function: Callable[
                [_ValueType],
                Reader[_ValueType, _EnvType],
            ],
        ) -> MyClass[_ValueType, _ErrorType, _EnvType]:
            ...

        def modify_env(
            self,
            function: Callable[[_EnvType], _NewEnvType],
        ) -> 'MyClass[_ValueType, _ErrorType, _NewEnvType]':
            ...

        @classmethod
        def ask(cls) -> 'MyClass[_ValueType, _ErrorType, _EnvType]':
            ...

        @classmethod
        def from_context(
            self, inner_value: Reader[_ValueType, _EnvType],
        ) -> MyClass[_ValueType, Exception, _EnvType]:
            ...
  out: |
    main:16: error: Cannot use a covariant type variable as a parameter
    main:19: error: Argument 1 of "bind_context" is incompatible with supertype "ReaderLike3"; supertype defines the argument type as "Callable[[_ValueType], RequiresContext[_UpdatedType, _EnvType]]"
    main:19: error: Return type "MyClass[_ValueType, _ErrorType, _EnvType]" of "bind_context" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _EnvType], _UpdatedType, _ErrorType, _EnvType]" in supertype "ReaderLike3"
    main:19: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:19: note: This violates the Liskov substitution principle
    main:28: error: Argument 1 of "modify_env" is incompatible with supertype "ReaderLike3"; supertype defines the argument type as "Callable[[_UpdatedType], _EnvType]"
    main:28: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:28: note: This violates the Liskov substitution principle
    main:35: error: Return type "MyClass[_ValueType, _ErrorType, _EnvType]" of "ask" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _EnvType], _EnvType, _ErrorType, _EnvType]" in supertype "ReaderLike3"
    main:39: error: Argument 1 of "from_context" is incompatible with supertype "ReaderLike3"; supertype defines the argument type as "RequiresContext[_ValueType, _EnvType]"
    main:39: error: Return type "MyClass[_ValueType, Exception, _EnvType]" of "from_context" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _EnvType], _ValueType, _ErrorType, _EnvType]" in supertype "ReaderLike3"
    main:39: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:39: note: This violates the Liskov substitution principle
