- case: reader_ioresult_like_inheritance_correct
  disable_cache: false
  main: |
    from typing import TypeVar, Callable
    from returns.interfaces.specific.reader_ioresult import ReaderIOResultLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.context import ReaderIOResult

    T = TypeVar('T')
    V = TypeVar('V')
    U = TypeVar('U')
    N = TypeVar('N')

    R1 = TypeVar('R1')
    R2 = TypeVar('R2')
    R3 = TypeVar('R3')

    class MyClass(
        SupportsKind3['MyClass', T, V, U],
        ReaderIOResultLike3[T, V, U],
    ):
        def bind_context_ioresult(
            self,
            function: Callable[[T], ReaderIOResult[N, V, U]],
        ) -> MyClass[N, V, U]:
            ...

        @classmethod
        def from_ioresult_context(
            cls,
            inner_value: ReaderIOResult[R1, R2, R3],
        ) -> MyClass[R1, R2, R3]:
            ...


- case: reader_ioresult_like_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar, final
    from returns.interfaces.specific.reader_ioresult import ReaderIOResultLike3
    from returns.primitives.hkt import SupportsKind3

    T = TypeVar('T')
    V = TypeVar('V')
    U = TypeVar('U')

    @final
    class MyClass(
        SupportsKind3['MyClass', T, V, U],
        ReaderIOResultLike3[T, V, U],
    ):
        ...
  out: |
    main:10: error: Final class main.MyClass has abstract attributes "alt", "apply", "ask", "bind", "bind_context", "bind_context_ioresult", "bind_context_result", "bind_io", "bind_ioresult", "bind_result", "compose_result", "from_context", "from_failed_context", "from_failed_io", "from_failure", "from_io", "from_ioresult", "from_ioresult_context", "from_result", "from_result_context", "from_value", "lash", "map", "modify_env", "no_args", "swap"  [misc]


- case: reader_ioresult_like_inheritance_wrong
  disable_cache: false
  main: |
    from typing import TypeVar, Callable
    from returns.interfaces.specific.reader_ioresult import ReaderIOResultLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.context import ReaderIOResult

    T = TypeVar('T')
    V = TypeVar('V')
    U = TypeVar('U')
    N = TypeVar('N')

    class MyClass(
        SupportsKind3['MyClass', T, V, U],
        ReaderIOResultLike3[T, V, U],
    ):
        def bind_context_ioresult(
            self,
            function: Callable[[N], ReaderIOResult[T, V, U]],
        ) -> MyClass[N, U, V]:
            ...

        @classmethod
        def from_ioresult_context(
            cls,
            inner_value: ReaderIOResult[T, V, U],
        ) -> MyClass[T, V, U]:
            ...
  out: |
    main:15: error: Return type "MyClass[N, U, V]" of "bind_context_ioresult" incompatible with return type "KindN[MyClass[T, V, U], _UpdatedType, V, U]" in supertype "ReaderIOResultLikeN"  [override]
    main:17: error: Argument 1 of "bind_context_ioresult" is incompatible with supertype "ReaderIOResultLikeN"; supertype defines the argument type as "Callable[[T], RequiresContextIOResult[_UpdatedType, V, U]]"  [override]
    main:17: note: This violates the Liskov substitution principle
    main:17: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:22: error: Return type "MyClass[T, V, U]" of "from_ioresult_context" incompatible with return type "KindN[MyClass[T, V, U], _ValueType, _ErrorType, _EnvType]" in supertype "ReaderIOResultLikeN"  [override]
    main:24: error: Argument 1 of "from_ioresult_context" is incompatible with supertype "ReaderIOResultLikeN"; supertype defines the argument type as "RequiresContextIOResult[_ValueType, _ErrorType, _EnvType]"  [override]
    main:24: note: This violates the Liskov substitution principle
    main:24: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
