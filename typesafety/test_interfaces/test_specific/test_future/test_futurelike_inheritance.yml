- case: future_inheritance_correct1
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Generator, Awaitable
    from returns.interfaces.specific.future import FutureLike1
    from returns.primitives.hkt import SupportsKind1, Kind1
    from returns.io import IO
    from returns.future import Future

    T = TypeVar('T')
    N = TypeVar('N')

    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        def bind_future(
            self,
            function: Callable[[T], Future[N]],
        ) -> MyClass[N]:
            ...

        def bind_async(
            self,
            function: Callable[[T], Awaitable[Kind1['MyClass', N]]],
        ) -> MyClass[N]:
            ...

        def bind_async_future(
            self,
            function: Callable[[T], Awaitable[Future[N]]],
        ) -> MyClass[N]:
            ...

        def bind_awaitable(
            self,
            function: Callable[[T], Awaitable[N]],
        ) -> MyClass[N]:
            ...

        @classmethod
        def from_future(
            cls,
            inner_value: Future[N],
        ) -> MyClass[N]:
            ...

    def test1(arg: int) -> Future[float]:
        ...

    async def test2(arg: float) -> Future[bool]:
        ...

    async def test3(arg: bool) -> MyClass[str]:
        ...

    x: Future[int]
    reveal_type(MyClass.from_future(x).bind_future(test1).bind_async_future(test2).bind_async(test3))  # N: Revealed type is "main.MyClass[builtins.str*]"


- case: future_inheritance_correct2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Generator, Any, Awaitable
    from returns.interfaces.specific.future import FutureLike2
    from returns.primitives.hkt import SupportsKind2, Kind2
    from returns.io import IOResult
    from returns.future import Future

    T = TypeVar('T')
    E = TypeVar('E')
    N = TypeVar('N')

    class MyClass(
        SupportsKind2['MyClass', T, E],
        FutureLike2[T, E],
    ):
        def bind_future(
            self,
            function: Callable[[T], Future[N]],
        ) -> MyClass[N, E]:
            ...

        def bind_async(
            self,
            function: Callable[[T], Awaitable[Kind2['MyClass', N, E]]],
        ) -> MyClass[N, E]:
            ...

        def bind_async_future(
            self,
            function: Callable[[T], Awaitable[Future[N]]],
        ) -> MyClass[N, E]:
            ...

        def bind_awaitable(
            self,
            function: Callable[[T], Awaitable[N]],
        ) -> MyClass[N, E]:
            ...

        @classmethod
        def from_future(
            cls,
            inner_value: Future[N],
        ) -> MyClass[N, Any]:
            ...

    def test1(arg: int) -> Future[float]:
        ...

    async def test2(arg: float) -> Future[bool]:
        ...

    async def test3(arg: bool) -> MyClass[str, bool]:
        ...

    x: MyClass[int, bool]
    reveal_type(x.bind_future(test1).bind_async_future(test2).bind_async(test3))  # N: Revealed type is "main.MyClass[builtins.str*, builtins.bool]"


- case: future_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.future import FutureLike1
    from returns.primitives.hkt import SupportsKind1

    T = TypeVar('T')

    @final
    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        ...
  out: |
    main:9: error: Final class main.MyClass has abstract attributes "apply", "bind", "bind_async", "bind_async_future", "bind_awaitable", "bind_future", "bind_io", "from_future", "from_io", "from_value", "map"


- case: future_inheritance_wrong
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Generator, Awaitable
    from returns.interfaces.specific.future import FutureLike1
    from returns.primitives.hkt import SupportsKind1, Kind1
    from returns.future import Future

    T = TypeVar('T')
    N = TypeVar('N')

    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        def bind_future(
            self,
            function: Callable[[T], Future[N]],
        ) -> MyClass[T]:
            ...

        def bind_async(
            self,
            function: Callable[[T], Awaitable[Kind1['MyClass', T]]],
        ) -> MyClass[T]:
            ...

        def bind_awaitable(
            self,
            function: Callable[[T], Awaitable[int]],
        ) -> MyClass[N]:
            ...

        def bind_async_future(
            self,
            function: Callable[[T], Awaitable[Future[T]]],
        ) -> MyClass[T]:
            ...

        def from_future(
            cls,
            inner_value: Future[T],
        ) -> MyClass[T]:
            ...
  out: |
    main:13: error: Return type "MyClass[T]" of "bind_future" incompatible with return type "KindN[MyClass[T], _UpdatedType, NoReturn, NoReturn]" in supertype "FutureLikeN"
    main:19: error: Argument 1 of "bind_async" is incompatible with supertype "FutureLikeN"; supertype defines the argument type as "Callable[[T], Awaitable[KindN[MyClass[T], _UpdatedType, NoReturn, NoReturn]]]"
    main:19: note: This violates the Liskov substitution principle
    main:19: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:19: error: Return type "MyClass[T]" of "bind_async" incompatible with return type "KindN[MyClass[T], _UpdatedType, NoReturn, NoReturn]" in supertype "FutureLikeN"
    main:25: error: Argument 1 of "bind_awaitable" is incompatible with supertype "FutureLikeN"; supertype defines the argument type as "Callable[[T], Awaitable[_UpdatedType]]"
    main:25: note: This violates the Liskov substitution principle
    main:25: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:31: error: Argument 1 of "bind_async_future" is incompatible with supertype "FutureLikeN"; supertype defines the argument type as "Callable[[T], Awaitable[Future[_UpdatedType]]]"
    main:31: note: This violates the Liskov substitution principle
    main:31: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:31: error: Return type "MyClass[T]" of "bind_async_future" incompatible with return type "KindN[MyClass[T], _UpdatedType, NoReturn, NoReturn]" in supertype "FutureLikeN"
    main:37: error: Argument 1 of "from_future" is incompatible with supertype "FutureLikeN"; supertype defines the argument type as "Future[_UpdatedType]"
    main:37: note: This violates the Liskov substitution principle
    main:37: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:37: error: Return type "MyClass[T]" of "from_future" incompatible with return type "KindN[MyClass[T], _UpdatedType, NoReturn, NoReturn]" in supertype "FutureLikeN"
