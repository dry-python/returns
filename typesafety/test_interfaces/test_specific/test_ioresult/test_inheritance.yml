- case: ioresult_inheritance_correct
  disable_cache: true
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.io import IO, IOResult

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultBased2[_ValueType, _ErrorType],
    ):
        def bind_ioresult(
            self,
            function: Callable[
                [_ValueType],
                IOResult[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType]:
            ...

        @classmethod
        def from_ioresult(
            self, inner_value: IOResult[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...

        @classmethod
        def from_failed_io(
            cls, inner_value: IO[_NewErrorType],
        ) -> MyClass[Any, _NewErrorType]:
            ...

    def test(a: int) -> IOResult[float, str]:
        ...

    x: IOResult[int, str]
    reveal_type(MyClass.from_ioresult(x).bind_ioresult(test))  # N: Revealed type is 'main.MyClass[builtins.float*, builtins.str]'


- case: ioresult_inheritance_missing
  disable_cache: true
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.io import IO, IOResult

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultBased2[_ValueType, _ErrorType],
    ):
        ...

    MyClass()
  out: |
    main:19: error: Cannot instantiate abstract class 'MyClass' with abstract attributes 'apply', 'bind', ... and 'swap' (12 methods suppressed)


- case: ioresult_inheritance_wrong
  disable_cache: true
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.io import IO, IOResult
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultBased2[_ValueType, _ErrorType],
    ):
        def bind_ioresult(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> int:
            ...

        def from_ioresult(
            self, inner_value: IOResult[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...

        @classmethod
        def from_failed_io(
            cls, inner_value: IO[_NewErrorType],
        ) -> MyClass[_NewErrorType, Any]:
            ...
  out: |
    main:18: error: Argument 1 of "bind_ioresult" is incompatible with supertype "IOResultBasedN"; supertype defines the argument type as "Callable[[_ValueType], IOResult[_UpdatedType, _ErrorType]]"
    main:18: error: Return type "int" of "bind_ioresult" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType], _UpdatedType, _ErrorType, NoReturn]" in supertype "IOResultBasedN"
    main:18: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:18: note: This violates the Liskov substitution principle
    main:27: error: Signature of "from_ioresult" incompatible with supertype "IOResultBasedN"
    main:33: error: Signature of "from_failed_io" incompatible with supertype "IOResultBasedN"
