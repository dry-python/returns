- case: ioresult_inheritance_correct2
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultLike2
    from returns.primitives.hkt import SupportsKind2
    from returns.io import IO, IOResult

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultLike2[_ValueType, _ErrorType],
    ):
        def bind_ioresult(
            self,
            function: Callable[
                [_ValueType],
                IOResult[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType]:
            ...

        @classmethod
        def from_ioresult(
            self, inner_value: IOResult[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...

        @classmethod
        def from_failed_io(
            cls, inner_value: IO[_NewErrorType],
        ) -> MyClass[Any, _NewErrorType]:
            ...

    def test(a: int) -> IOResult[float, str]:
        ...

    x: IOResult[int, str]
    reveal_type(MyClass.from_ioresult(x).bind_ioresult(test))  # N: Revealed type is "main.MyClass[builtins.float, builtins.str]"


- case: ioresult_inheritance_correct3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.io import IO, IOResult

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')
    _T = TypeVar('_T')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _T],
        IOResultLike3[_ValueType, _ErrorType, _T],
    ):
        def bind_ioresult(
            self,
            function: Callable[
                [_ValueType],
                IOResult[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, _T]:
            ...

        @classmethod
        def from_ioresult(
            self, inner_value: IOResult[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType, Any]:
            ...

        @classmethod
        def from_failed_io(
            cls, inner_value: IO[_NewErrorType],
        ) -> MyClass[Any, _NewErrorType, Any]:
            ...

    def test(a: int) -> IOResult[float, str]:
        ...

    x: IOResult[int, str]
    reveal_type(MyClass.from_ioresult(x).bind_ioresult(test))  # N: Revealed type is "main.MyClass[builtins.float, builtins.str, Any]"


- case: ioresult_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.ioresult import IOResultLike2
    from returns.primitives.hkt import SupportsKind2

    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    @final
    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultLike2[_ValueType, _ErrorType],
    ):
        ...
  out: |
    main:10: error: Final class main.MyClass has abstract attributes "alt", "apply", "bind", "bind_io", "bind_ioresult", "bind_result", "compose_result", "from_failed_io", "from_failure", "from_io", "from_ioresult", "from_result", "from_value", "lash", "map", "swap"


- case: ioresult_inheritance_wrong
  # TODO: unskip, mypy fails sometimes on different python versions
  skip: True
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultLike2
    from returns.primitives.hkt import SupportsKind2
    from returns.io import IO, IOResult
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultLike2[_ValueType, _ErrorType],
    ):
        def bind_ioresult(
            self,
            function: Callable[
                [_ValueType],
                Result[_NewValueType, _ErrorType],
            ],
        ) -> int:
            ...

        def from_ioresult(
            self, inner_value: IOResult[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType]:
            ...

        @classmethod
        def from_failed_io(
            cls, inner_value: IO[_NewErrorType],
        ) -> MyClass[_NewErrorType, Any]:
            ...
  out: |
    main:18: error: Argument 1 of "bind_ioresult" is incompatible with supertype "IOResultLikeN"; supertype defines the argument type as "Callable[[_ValueType], IOResult[_UpdatedType, _ErrorType]]"
    main:18: note: This violates the Liskov substitution principle
    main:18: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:18: error: Return type "int" of "bind_ioresult" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType], _UpdatedType, _ErrorType, NoReturn]" in supertype "IOResultLikeN"
    main:27: error: Signature of "from_ioresult" incompatible with supertype "IOResultLikeN"
    main:27: note:      Superclass:
    main:27: note:          def [_ValueType, _ErrorType] from_ioresult(cls, inner_value: IOResult[_ValueType, _ErrorType]) -> KindN[MyClass[_ValueType, _ErrorType], _ValueType, _ErrorType, NoReturn]
    main:27: note:      Subclass:
    main:27: note:          def [_NewValueType, _NewErrorType] from_ioresult(self, inner_value: IOResult[_NewValueType, _NewErrorType]) -> MyClass[_NewValueType, _NewErrorType]
    main:33: error: Signature of "from_failed_io" incompatible with supertype "IOResultLikeN"
    main:33: note:      Superclass:
    main:33: note:          def [_ErrorType] from_failed_io(cls, inner_value: IO[_ErrorType]) -> KindN[MyClass[_ValueType, _ErrorType], _ValueType, _ErrorType, NoReturn]
    main:33: note:      Subclass:
    main:33: note:          @classmethod
    main:33: note:          def [_NewErrorType] from_failed_io(cls, inner_value: IO[_NewErrorType]) -> MyClass[_NewErrorType, Any]


- case: ioresult_inheritance_wrong3
  disable_cache: false
  main: |
    from typing import Callable, TypeVar, Any
    from returns.interfaces.specific.ioresult import IOResultLike3
    from returns.primitives.hkt import SupportsKind3
    from returns.io import IO, IOResult

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')
    _T = TypeVar('_T')

    # Result related:
    _ErrorType = TypeVar('_ErrorType')
    _NewErrorType = TypeVar('_NewErrorType')

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _T],
        IOResultLike3[_ValueType, _ErrorType, _T],
    ):
        def bind_ioresult(
            self,
            function: Callable[
                [_ValueType],
                IOResult[_NewValueType, _ErrorType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, int]:
            ...

        @classmethod
        def from_ioresult(
            self, inner_value: IOResult[_NewValueType, _NewErrorType],
        ) -> MyClass[_NewValueType, _NewErrorType, str]:
            ...

        @classmethod
        def from_failed_io(
            cls, inner_value: IO[_NewErrorType],
        ) -> MyClass[Any, _NewErrorType, Exception]:
            ...
  out: |
    main:18: error: Return type "MyClass[_NewValueType, _ErrorType, int]" of "bind_ioresult" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _T], _UpdatedType, _ErrorType, _T]" in supertype "IOResultLikeN"
    main:28: error: Return type "MyClass[_NewValueType, _NewErrorType, str]" of "from_ioresult" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _T], _ValueType, _ErrorType, _T]" in supertype "IOResultLikeN"
    main:34: error: Return type "MyClass[Any, _NewErrorType, Exception]" of "from_failed_io" incompatible with return type "KindN[MyClass[_ValueType, _ErrorType, _T], _ValueType, _ErrorType, _T]" in supertype "IOResultLikeN"
