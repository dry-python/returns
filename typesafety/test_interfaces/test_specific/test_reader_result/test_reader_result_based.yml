- case: reader_result_based_inheritance_correct
  disable_cache: false
  main: |
    from typing import TypeVar, Callable
    from returns.interfaces.specific.reader_result import ReaderResultBased3
    from returns.primitives.hkt import SupportsKind3
    from returns.result import Result

    T = TypeVar('T')
    V = TypeVar('V')
    U = TypeVar('U')

    class MyClass(
        SupportsKind3['MyClass', T, V, U],
        ReaderResultBased3[T, V, U],
    ):
        def __call__(self, deps: U) -> Result[T, V]:
            ...


- case: reader_result_based_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.specific.reader_result import ReaderResultBased3
    from returns.primitives.hkt import SupportsKind3

    T = TypeVar('T')
    V = TypeVar('V')
    U = TypeVar('U')

    @final
    class MyClass(
        SupportsKind3['MyClass', T, V, U],
        ReaderResultBased3[T, V, U],
    ):
        ...
  out: |
    main:11: error: Final class main.MyClass has abstract attributes "__call__", "alt", "apply", "ask", "bind", "bind_context", "bind_context_result", "bind_result", "empty", "from_context", "from_failed_context", "from_failure", "from_iterable", "from_result", "from_result_context", "from_value", "map", "modify_env", "rescue", "swap"


- case: reader_result_based_inheritance_wrong
  disable_cache: false
  main: |
    from typing import TypeVar, Callable
    from returns.interfaces.specific.reader_result import ReaderResultBased3
    from returns.primitives.hkt import SupportsKind3
    from returns.result import Result

    T = TypeVar('T')
    V = TypeVar('V')
    U = TypeVar('U')

    class MyClass(
        SupportsKind3['MyClass', T, V, U],
        ReaderResultBased3[T, V, U],
    ):
        def __call__(self, deps: T) -> Result[V, U]:
            ...
  out: |
    main:14: error: Argument 1 of "__call__" is incompatible with supertype "CanBeCalled"; supertype defines the argument type as "U"
    main:14: error: Return type "Result[V, U]" of "__call__" incompatible with return type "Result[T, V]" in supertype "CanBeCalled"
    main:14: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:14: note: This violates the Liskov substitution principle
