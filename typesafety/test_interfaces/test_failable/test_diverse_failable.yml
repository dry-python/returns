- case: diverse_failable_inheritance_correct2
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.failable import DiverseFailable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')
    _UpdatedType = TypeVar('_UpdatedType')

    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        DiverseFailable2[_FirstType, _SecondType],
    ):
        def swap(self) -> MyClass[_SecondType, _FirstType]:
            ...

        @classmethod
        def from_failure(
            cls,
            inner_value: _UpdatedType
        ) -> MyClass[_FirstType, _UpdatedType]:
            ...

    x: MyClass[str, int]
    reveal_type(x.swap())  # N: Revealed type is 'main.MyClass[builtins.int*, builtins.str*]'
    reveal_type(MyClass.from_failure(10))  # N: Revealed type is 'main.MyClass[builtins.int*, builtins.int*]'


- case: diverse_failable_inheritance_correct3
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.failable import DiverseFailable3
    from returns.primitives.hkt import SupportsKind3

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')
    _ThirdType = TypeVar('_ThirdType')
    _UpdatedType = TypeVar('_UpdatedType')

    class MyClass(
        SupportsKind3['MyClass', _FirstType, _SecondType, _ThirdType],
        DiverseFailable3[_FirstType, _SecondType, _ThirdType],
    ):
        def swap(self) -> MyClass[_SecondType, _FirstType, _ThirdType]:
            ...

        @classmethod
        def from_failure(
            cls,
            inner_value: _UpdatedType
        ) -> MyClass[_FirstType, _UpdatedType, _ThirdType]:
            ...

    x: MyClass[float, bool, str]
    reveal_type(x.swap())  # N: Revealed type is 'main.MyClass[builtins.bool*, builtins.float*, builtins.str*]'
    reveal_type(MyClass.from_failure(10))  # N: Revealed type is 'main.MyClass[builtins.int*, builtins.int*, <nothing>]'


- case: diverse_failable_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.failable import DiverseFailable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')

    @final
    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        DiverseFailable2[_FirstType, _SecondType],
    ):
        ...
  out: |
    main:10: error: Final class main.MyClass has abstract attributes "alt", "apply", "bind", "from_failure", "from_value", "map", "rescue", "swap"


- case: diverse_failable_inheritance_wrong2
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.failable import DiverseFailable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')

    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        DiverseFailable2[_FirstType, _SecondType],
    ):
        def swap(self) -> MyClass[_FirstType, _SecondType]:
            ...

        @classmethod
        def from_failure(
            cls,
            inner_value: _FirstType
        ) -> MyClass[_FirstType, _FirstType]:
            ...

    x: MyClass[str, int]
  out: |
    main:12: error: Return type "MyClass[_FirstType, _SecondType]" of "swap" incompatible with return type "KindN[MyClass[_FirstType, _SecondType], _SecondType, _FirstType, NoReturn]" in supertype "DiverseFailableN"
    main:16: error: Argument 1 of "from_failure" is incompatible with supertype "DiverseFailableN"; supertype defines the argument type as "_UpdatedType"
    main:16: error: Return type "MyClass[_FirstType, _FirstType]" of "from_failure" incompatible with return type "KindN[MyClass[_FirstType, _SecondType], _FirstType, _UpdatedType, NoReturn]" in supertype "DiverseFailableN"
    main:16: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:16: note: This violates the Liskov substitution principle


- case: diverse_failable_inheritance_wrong3
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.failable import DiverseFailable3
    from returns.primitives.hkt import SupportsKind3

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')
    _ThirdType = TypeVar('_ThirdType')

    class MyClass(
        SupportsKind3['MyClass', _FirstType, _SecondType, _ThirdType],
        DiverseFailable3[_FirstType, _SecondType, _ThirdType],
    ):
        def swap(self) -> MyClass[_FirstType, _SecondType, _ThirdType]:
            ...

        @classmethod
        def from_failure(
            cls,
            inner_value: _SecondType
        ) -> MyClass[_FirstType, _FirstType, _FirstType]:
            ...

    x: MyClass[float, bool, str]
  out: |
    main:13: error: Return type "MyClass[_FirstType, _SecondType, _ThirdType]" of "swap" incompatible with return type "KindN[MyClass[_FirstType, _SecondType, _ThirdType], _SecondType, _FirstType, _ThirdType]" in supertype "DiverseFailableN"
    main:17: error: Argument 1 of "from_failure" is incompatible with supertype "DiverseFailableN"; supertype defines the argument type as "_UpdatedType"
    main:17: error: Return type "MyClass[_FirstType, _FirstType, _FirstType]" of "from_failure" incompatible with return type "KindN[MyClass[_FirstType, _SecondType, _ThirdType], _FirstType, _UpdatedType, _ThirdType]" in supertype "DiverseFailableN"
    main:17: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:17: note: This violates the Liskov substitution principle
