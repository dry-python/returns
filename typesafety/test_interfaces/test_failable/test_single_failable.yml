- case: single_failable_inheritance_correct2
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.failable import SingleFailable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')

    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        SingleFailable2[_FirstType, _SecondType],
    ):
        ...


- case: single_failable_inheretance_correct3
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.failable import SingleFailable3
    from returns.primitives.hkt import SupportsKind3

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')
    _ThirdType = TypeVar('_ThirdType')

    class MyClass(
        SupportsKind3['MyClass', _FirstType, _SecondType, _ThirdType],
        SingleFailable3[_FirstType, _SecondType, _ThirdType],
    ):
        ...


- case: single_failable_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from typing_extensions import final
    from returns.interfaces.failable import SingleFailable2
    from returns.primitives.hkt import SupportsKind2

    _FirstType = TypeVar('_FirstType')
    _SecondType = TypeVar('_SecondType')

    @final
    class MyClass(
        SupportsKind2['MyClass', _FirstType, _SecondType],
        SingleFailable2[_FirstType, _SecondType],
    ):
        ...
  out: |
    main:10: error: Final class main.MyClass has abstract attributes "apply", "bind", "empty", "from_iterable", "from_value", "map", "rescue"
