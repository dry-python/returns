- case: applicative_inheritance_correct1
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.applicative import Applicative1
    from returns.primitives.hkt import Kind1, SupportsKind1, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Applicative1[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def apply(
            self,
            container: Kind1['MyClass', Callable[[V], N]],
        ) -> 'MyClass[N]':
            return MyClass(dekind(container).value(self.value))

        @classmethod
        def from_value(cls, inner_value: N) -> MyClass[N]:
            return MyClass(inner_value)

    reveal_type(MyClass('1').apply(MyClass.from_value(int)))  # N: Revealed type is 'main.MyClass[builtins.int*]'


- case: applicative_inheritance_correct2
  disable_cache: false
  main: |
    from typing import Any, Callable, TypeVar
    from returns.interfaces.applicative import Applicative2
    from returns.primitives.hkt import Kind2, SupportsKind2, dekind

    V = TypeVar('V')
    E = TypeVar('E')
    N = TypeVar('N')

    class MyClass(SupportsKind2['MyClass', V, E], Applicative2[V, E]):
        def __init__(self, value: V, error: E) -> None:
            self.value = value
            self.error = error

        def apply(
            self,
            container: Kind2['MyClass', Callable[[V], N], E],
        ) -> 'MyClass[N, E]':
            return MyClass(dekind(container).value(self.value), self.error)

        @classmethod
        def from_value(cls, inner_value: N) -> MyClass[N, Any]:
            return MyClass(inner_value, None)

    reveal_type(MyClass('1', True).apply(MyClass.from_value(int)))  # N: Revealed type is 'main.MyClass[builtins.int*, builtins.bool]'


- case: applicative_inheritance_correct3
  disable_cache: false
  main: |
    from typing import Any, Callable, TypeVar
    from returns.interfaces.applicative import Applicative3
    from returns.primitives.hkt import Kind3, SupportsKind3, dekind

    V = TypeVar('V')
    E = TypeVar('E')
    T = TypeVar('T')
    N = TypeVar('N')

    class MyClass(SupportsKind3['MyClass', V, E, T], Applicative3[V, E, T]):
        def __init__(self, value: V, error: E, last: T) -> None:
            self.value = value
            self.error = error
            self.last = last

        def apply(
            self,
            container: Kind3['MyClass', Callable[[V], N], E, T],
        ) -> 'MyClass[N, E, T]':
            return MyClass(dekind(container).value(self.value), self.error, self.last)

        @classmethod
        def from_value(cls, inner_value: N) -> MyClass[N, Any, Any]:
            return MyClass(inner_value, None, None)

    reveal_type(MyClass('1', True, 'a').apply(MyClass.from_value(int)))  # N: Revealed type is 'main.MyClass[builtins.int*, builtins.bool, builtins.str]'


- case: applicative_inheritance_missing
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.applicative import Applicative1
    from returns.primitives.hkt import SupportsKind1

    V = TypeVar('V')

    class MyClass(SupportsKind1['MyClass', V], Applicative1[V]):
        ...

    MyClass()
  out: |
    main:10: error: Cannot instantiate abstract class 'MyClass' with abstract attributes 'apply' and 'from_value'


- case: applicative_inheritance_wrong
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.interfaces.applicative import Applicative1
    from returns.primitives.hkt import SupportsKind1

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind1['MyClass', V], Applicative1[V]):
        def apply(
            self,
            container: 'MyClass[Callable[[V], N]]',
        ) -> 'MyClass[N]':
            ...

        @classmethod
        def from_value(cls, inner_value: V) -> None:
            ...
  out: |
    main:9: error: Argument 1 of "apply" is incompatible with supertype "ApplicativeN"; supertype defines the argument type as "KindN[MyClass[V], Callable[[V], _UpdatedType], NoReturn, NoReturn]"
    main:9: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:9: note: This violates the Liskov substitution principle
    main:16: error: Argument 1 of "from_value" is incompatible with supertype "ApplicativeN"; supertype defines the argument type as "_UpdatedType"
    main:16: error: Return type "None" of "from_value" incompatible with return type "KindN[MyClass[V], _UpdatedType, NoReturn, NoReturn]" in supertype "ApplicativeN"
    main:16: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:16: note: This violates the Liskov substitution principle
