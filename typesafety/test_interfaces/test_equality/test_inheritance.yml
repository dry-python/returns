- case: equable_correct_inheritance1
  disable_cache: false
  main: |
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.equable import Equable
    from returns.primitives.container import container_equality
    from typing import TypeVar

    T = TypeVar('T')

    class MyOwn(
        SupportsKind1['MyOwn', T],
        Equable,
    ):
        def __init__(self, value: T) -> None:
            ...

        equals = container_equality

    reveal_type(MyOwn(1).equals(MyOwn(1)))  # N: Revealed type is 'builtins.bool'
    reveal_type(MyOwn(1).equals(MyOwn('a')))  # N: Revealed type is 'builtins.bool'
    MyOwn(1).equals(1)  # E: Argument 1 has incompatible type "int"; expected "KindN[MyOwn[Any], Any, Any, Any]"


- case: equable_correct_inheritance2
  disable_cache: false
  main: |
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.equable import Equable
    from typing import TypeVar

    T = TypeVar('T')
    V = TypeVar('V')

    class MyOwn(
        SupportsKind1['MyOwn', T],
        Equable,
    ):
        def __init__(self, value: T) -> None:
            ...

        def equals(self, other: MyOwn[V]) -> bool:
            ...

    reveal_type(MyOwn(1).equals(MyOwn(1)))  # N: Revealed type is 'builtins.bool'
    reveal_type(MyOwn(1).equals(MyOwn('a')))  # N: Revealed type is 'builtins.bool'


- case: equable_inheritance_missing
  disable_cache: false
  main: |
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.equable import Equable
    from typing import TypeVar
    from typing_extensions import final

    T = TypeVar('T')

    @final
    class MyOwn(
        SupportsKind1['MyOwn', T],
        Equable,
    ):
        ...
  out: |
    main:9: error: Final class main.MyOwn has abstract attributes "equals"


- case: equable_inheritance_wrong
  disable_cache: false
  main: |
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.equable import Equable
    from typing import TypeVar
    from typing_extensions import final

    T = TypeVar('T')

    @final
    class MyOwn(
        SupportsKind1['MyOwn', T],
        Equable,
    ):
        def equals(self, other: bool) -> T:
            ...
  out: |
    main:13: error: Argument 1 of "equals" is incompatible with supertype "Equable"; supertype defines the argument type as "MyOwn[T]"
    main:13: error: Return type "T" of "equals" incompatible with return type "bool" in supertype "Equable"
    main:13: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:13: note: This violates the Liskov substitution principle
