- case: flatten_wrong_flatten_non_bindable
  disable_cache: false
  main: |
    from typing import Callable, TypeVar
    from returns.converters import flatten
    from returns.interfaces.mappable import Mappable1
    from returns.primitives.hkt import Kind1, SupportsKind1
    from returns.result import Result

    V = TypeVar('V')
    N = TypeVar('N')

    class Functor(SupportsKind1['Functor', V], Mappable1[V]):
        def map(self, function: Callable[[V], N]) -> Functor[N]:
            ...

    x: Functor[Functor[int]]
    flatten(x)  # E: Value of type variable "_BindableKind" of "flatten" cannot be "Functor[Any]"


- case: flatten_wrong_error_type
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.result import Result

    x: Result[Result[int, str], float]
    # TODO: I am pretty sure we can later fix this to be an error:
    reveal_type(flatten(x))  # N: Revealed type is "returns.result.Result[builtins.int, builtins.object]"


- case: flatten_custom_type
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.converters import flatten
    from returns.interfaces.bindable import Bindable1
    from returns.primitives.hkt import SupportsKind1

    V = TypeVar('V')

    class MyClass(SupportsKind1['MyClass', V], Bindable1[V]):
        ...

    x: MyClass[MyClass[int]]
    reveal_type(flatten(x))  # N: Revealed type is "main.MyClass[builtins.int]"


- case: flatten_wrong_flatten_error_type
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.result import Result

    def returns_result() -> Result[int, Result[int, str]]:
        ...

    flatten(returns_result())
  out: |
    main:7: error: Argument 1 to "flatten" has incompatible type "Result[int, Result[int, str]]"; expected "KindN[Result[Any, Any], KindN[Result[Any, Any], <nothing>, Result[int, str], NoReturn], Result[int, str], NoReturn]"


- case: flatten_io
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.io import IO

    reveal_type(flatten(IO(IO(1))))  # N: Revealed type is "returns.io.IO[builtins.int]"


- case: flatten_maybe
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.maybe import Some

    reveal_type(flatten(Some(Some(1))))  # N: Revealed type is "returns.maybe.Maybe[builtins.int]"


- case: flatten_result
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.result import Result

    def returns_result() -> Result[Result[int, str], str]:
        ...

    reveal_type(flatten(returns_result()))  # N: Revealed type is "returns.result.Result[builtins.int, builtins.str]"


- case: flatten_ioresult
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.io import IOResult

    def returns_ioresult() -> IOResult[IOResult[int, str], str]:
        ...

    reveal_type(flatten(returns_ioresult()))  # N: Revealed type is "returns.io.IOResult[builtins.int, builtins.str]"


- case: flatten_context
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.context import RequiresContext

    x: RequiresContext[RequiresContext[str, int], int]

    reveal_type(flatten(x))  # N: Revealed type is "returns.context.requires_context.RequiresContext[builtins.str, builtins.int]"


- case: flatten_context_result
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.context import RequiresContextResult

    x: RequiresContextResult[RequiresContextResult[str, int, float], int, float]

    reveal_type(flatten(x))  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.str, builtins.int, builtins.float]"


- case: flatten_context_ioresult
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.context import RequiresContextIOResult

    x: RequiresContextIOResult[RequiresContextIOResult[str, int, float], int, float]

    reveal_type(flatten(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.str, builtins.int, builtins.float]"


- case: flatten_context_ioresult
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.context import RequiresContextIOResult

    x: RequiresContextIOResult[RequiresContextIOResult[str, int, float], int, float]

    reveal_type(flatten(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.str, builtins.int, builtins.float]"


- case: flatten_future_result
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.context import ReaderFutureResult

    x: ReaderFutureResult[ReaderFutureResult[int, bool, str], bool, str]

    reveal_type(flatten(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: flatten_future_result
  disable_cache: false
  main: |
    from returns.converters import flatten
    from returns.future import FutureResult

    x: FutureResult[FutureResult[int, str], str]

    reveal_type(flatten(x))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.str]"
