- case: partial_wrong_generic
  disable_cache: true
  main: |
    from returns.curry import partial
    from typing import List, TypeVar

    T = TypeVar('T')

    def multiple(
        a: List[T],
        b: List[T],
    ) -> T:
        ...

    x: List[int]
    y: List[str]

    reveal_type(partial(multiple, x)(y))
  out: |
    main:15: error: Argument 1 to "multiple" has incompatible type "List[str]"; expected "List[int]"
    main:15: note: Revealed type is 'builtins.int*'


- case: partial_correct_generic
  disable_cache: true
  main: |
    from returns.curry import partial
    from typing import List, TypeVar

    T = TypeVar('T')

    def multiple(
        a: List[T],
        b: List[T],
    ) -> T:
        ...

    x: List[int]
    y: List[int]

    reveal_type(partial(multiple, x)(y))
  out: |
    main:15: note: Revealed type is 'builtins.int*'


- case: partial_single_generic
  disable_cache: true
  main: |
    from returns.curry import partial
    from typing import List, TypeVar

    T = TypeVar('T')

    def multiple(
        a: int,
        b: List[T],
        c: bool = False,
    ) -> T:
        ...

    x: List[int]

    reveal_type(partial(multiple))
    reveal_type(partial(multiple, 1))
    reveal_type(partial(multiple, 1)(x, True))
    reveal_type(partial(multiple, 1)(x))
    reveal_type(partial(multiple, 1)(x, c=True))
    reveal_type(partial(multiple, 2, x))
    reveal_type(partial(multiple, 2, x, True))
    reveal_type(partial(multiple, 2, x)())
  out: |
    main:15: note: Revealed type is 'def [T] (a: builtins.int, b: builtins.list[T`-1], c: builtins.bool =) -> T`-1'
    main:16: note: Revealed type is 'def [T] (b: builtins.list[T`-1], c: builtins.bool =) -> T`-1'
    main:17: note: Revealed type is 'builtins.int*'
    main:18: note: Revealed type is 'builtins.int*'
    main:19: note: Revealed type is 'builtins.int*'
    main:20: note: Revealed type is 'def (c: builtins.bool =) -> builtins.int*'
    main:21: note: Revealed type is 'def () -> builtins.int*'
    main:22: note: Revealed type is 'builtins.int*'


- case: partial_double_generic_complex37
  disable_cache: true
  skip: sys.version_info >= (3, 8)
  main: |
    from returns.curry import partial
    from typing import List, TypeVar, Union

    A = TypeVar('A')
    B = TypeVar('B')

    def multiple(
        a: int,
        *,
        b: List[B],
        c: List[A],
    ) -> Union[A, B]:
        ...

    x: List[int]
    y: List[str]

    reveal_type(partial(multiple))
    reveal_type(partial(multiple, 1))
    reveal_type(partial(multiple, 1, b=x))
    reveal_type(partial(multiple, 1, c=x))
    reveal_type(partial(multiple, 1, b=y))
    reveal_type(partial(multiple, 1, c=y))
  out: |
    main:18: note: Revealed type is 'def [B, A] (a: builtins.int, *, b: builtins.list[B`-1], c: builtins.list[A`-2]) -> Union[A`-2, B`-1]'
    main:19: note: Revealed type is 'def [A, B] (*, b: builtins.list[B`-1], c: builtins.list[A`-2]) -> Union[A`-2, B`-1]'
    main:20: note: Revealed type is 'def [A] (*, c: builtins.list[A`-2]) -> Union[A`-2, builtins.int*]'
    main:21: note: Revealed type is 'def [B] (*, b: builtins.list[B`-1]) -> Union[builtins.int*, B`-1]'
    main:22: note: Revealed type is 'def [A] (*, c: builtins.list[A`-2]) -> Union[A`-2, builtins.str*]'
    main:23: note: Revealed type is 'def [B] (*, b: builtins.list[B`-1]) -> Union[builtins.str*, B`-1]'


# Python3.8+ sorts generic arguments differently:
- case: partial_double_generic_complex38
  disable_cache: true
  skip: sys.version_info < (3, 8)
  main: |
    from returns.curry import partial
    from typing import List, TypeVar, Union

    A = TypeVar('A')
    B = TypeVar('B')

    def multiple(
        a: int,
        *,
        b: List[B],
        c: List[A],
    ) -> Union[A, B]:
        ...

    x: List[int]
    y: List[str]

    reveal_type(partial(multiple))
    reveal_type(partial(multiple, 1))
    reveal_type(partial(multiple, 1, b=x))
    reveal_type(partial(multiple, 1, c=x))
    reveal_type(partial(multiple, 1, b=y))
    reveal_type(partial(multiple, 1, c=y))
  out: |
    main:18: note: Revealed type is 'def [B, A] (a: builtins.int, *, b: builtins.list[B`-1], c: builtins.list[A`-2]) -> Union[A`-2, B`-1]'
    main:19: note: Revealed type is 'def [B, A] (*, b: builtins.list[B`-1], c: builtins.list[A`-2]) -> Union[A`-2, B`-1]'
    main:20: note: Revealed type is 'def [A] (*, c: builtins.list[A`-2]) -> Union[A`-2, builtins.int*]'
    main:21: note: Revealed type is 'def [B] (*, b: builtins.list[B`-1]) -> Union[builtins.int*, B`-1]'
    main:22: note: Revealed type is 'def [A] (*, c: builtins.list[A`-2]) -> Union[A`-2, builtins.str*]'
    main:23: note: Revealed type is 'def [B] (*, b: builtins.list[B`-1]) -> Union[builtins.str*, B`-1]'


- case: partial_double_generic
  disable_cache: true
  main: |
    from returns.curry import partial
    from typing import List, TypeVar, Union

    A = TypeVar('A')
    B = TypeVar('B')

    def multiple(
        a: int,
        *,
        b: List[B],
        c: List[A],
    ) -> Union[A, B]:
        ...

    x: List[int]
    y: List[str]
    reveal_type(partial(multiple, 1, c=y, b=x))

    reveal_type(partial(multiple, 1, b=x)(c=y))
    reveal_type(partial(multiple, 1, c=x)(b=y))
  out: |
    main:17: note: Revealed type is 'def () -> Union[builtins.str*, builtins.int*]'
    main:19: note: Revealed type is 'Union[builtins.str*, builtins.int]'
    main:20: note: Revealed type is 'Union[builtins.int, builtins.str*]'
