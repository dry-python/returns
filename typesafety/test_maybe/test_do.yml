- case: do_all_errors
  disable_cache: false
  main: |
    from returns.maybe import Maybe

    reveal_type(Maybe.do(  # N: Revealed type is "returns.maybe.Maybe[Any]"
        first / second
        for first in Maybe.empty
        for second in Maybe.empty
    ))


- case: do_types_missmatch
  disable_cache: false
  main: |
    from returns.maybe import Maybe
    from returns.result import Success

    Maybe.do(
        x + y
        for x in Success(1)  # E: Invalid type supplied in do-notation: expected "returns.maybe.Maybe[Any]", got "returns.result.Success[builtins.int*]"
        for y in Maybe.from_value(2.5)
    )


- case: do_types_converted
  disable_cache: false
  main: |
    from returns.maybe import Maybe
    from returns.result import Result
    from returns.converters import result_to_maybe

    a: Result[int, str]

    reveal_type(Maybe.do(  # N: Revealed type is "returns.maybe.Maybe[builtins.float*]"
        x + y
        for x in result_to_maybe(a)
        for y in Maybe.from_value(2.5)
    ))


- case: do_with_if
  skip: sys.version_info[:2] < (3, 8)
  disable_cache: false
  main: |
    from returns.maybe import Maybe

    Maybe.do(  # E: Using "if" conditions inside a generator is not allowed
        x + y
        for x in Maybe.from_value(1)
        for y in Maybe.from_value(2.5)
        if y > 5
    )


- case: do_with_var
  disable_cache: false
  main: |
    from returns.maybe import Maybe

    x = (
        x + y
        for x in Maybe.from_value(1)
        for y in Maybe.from_value(2.5)
    )

    Maybe.do(x)  # E: Literal generator expression is required, not a variable or function call
