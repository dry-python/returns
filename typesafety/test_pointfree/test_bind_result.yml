- case: bind_result_and_flow
  disable_cache: false
  main: |
    from returns.result import Result
    from returns.io import IOResult
    from returns.functions import identity
    from returns.pointfree import bind_result
    from returns.pipeline import flow

    def test(arg: int) -> Result[float, str]:
        ...

    def second(arg: float) -> Result[bool, str]:
        ...

    r: IOResult[int, str]
    reveal_type(flow(r, bind_result(test), bind_result(second)))  # N: Revealed type is "returns.io.IOResult[builtins.bool, builtins.str]"


- case: bind_result_wrong_first_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.context import RequiresContextFutureResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: RequiresContextFutureResult[str, str, bool]
    bind_result(test)(x)  # E: Argument 1 has incompatible type "RequiresContextFutureResult[str, str, bool]"; expected "KindN[RequiresContextFutureResult[Any, Any, Any], float, str, bool]"


- case: bind_result_wrong_second_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.context import RequiresContextFutureResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: RequiresContextFutureResult[float, int, bool]
    bind_result(test)(x)  # E: Argument 1 has incompatible type "RequiresContextFutureResult[float, int, bool]"; expected "KindN[RequiresContextFutureResult[Any, Any, Any], float, str, bool]"


- case: bind_result_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: Result[float, str]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "returns.result.Result[builtins.int, builtins.str]"


- case: bind_result_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.io import IOResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: IOResult[float, str]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "returns.io.IOResult[builtins.int, builtins.str]"


- case: bind_result_requires_context_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.context import RequiresContextResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: RequiresContextResult[float, str, bool]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.int, builtins.str, builtins.bool]"


- case: bind_result_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.context import RequiresContextIOResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: RequiresContextIOResult[float, str, bool]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int, builtins.str, builtins.bool]"


- case: bind_result_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.context import RequiresContextFutureResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: RequiresContextFutureResult[float, str, bool]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.str, builtins.bool]"


- case: bind_result_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_result
    from returns.future import FutureResult
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.str]"


- case: bind_result_custom_type
  disable_cache: false
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.result import ResultBased2
    from returns.primitives.hkt import SupportsKind2
    from returns.result import Result
    from returns.pointfree import bind_result

    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        ResultBased2[_ValueType, _ErrorType],
    ):
        ...

    def test(a: int) -> Result[float, str]:
        ...

    x: MyClass[int, str]
    reveal_type(bind_result(test)(x))  # N: Revealed type is "main.MyClass[builtins.float, builtins.str]"
