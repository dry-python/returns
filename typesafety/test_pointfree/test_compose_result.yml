- case: compose_result_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import compose_result
    from returns.io import IOResult
    from returns.result import Result

    def test(arg: Result[str, int]) -> IOResult[float, int]:
        ...

    x: IOResult[str, int]
    reveal_type(compose_result(test)(x))  # N: Revealed type is "returns.io.IOResult[builtins.float, builtins.int]"


- case: compose_result_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import compose_result
    from returns.context import RequiresContextIOResult
    from returns.result import Result

    def test(arg: Result[str, bool]) -> RequiresContextIOResult[int, bool, float]:
        ...

    x: RequiresContextIOResult[str, bool, float]
    reveal_type(compose_result(test)(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int, builtins.bool, builtins.float]"


- case: compose_result_future
  disable_cache: false
  main: |
    from returns.pointfree import compose_result
    from returns.future import FutureResult
    from returns.result import Result

    def test(arg: Result[str, float]) -> FutureResult[str, float]:
        ...

    x: FutureResult[str, float]
    reveal_type(compose_result(test)(x))  # N: Revealed type is "returns.future.FutureResult[builtins.str, builtins.float]"


- case: compose_result_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import compose_result
    from returns.context import NoDeps, RequiresContextFutureResult
    from returns.result import Result

    def test(arg: Result[str, float]) -> RequiresContextFutureResult[str, float, NoDeps]:
        ...

    x: RequiresContextFutureResult[str, float, NoDeps]
    reveal_type(compose_result(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.float, Any]"


- case: compose_result_custom_type
  disable_cache: false
  main: |
    from typing import TypeVar

    from returns.pointfree import compose_result
    from returns.interfaces.specific.ioresult import IOResultLike2
    from returns.primitives.hkt import SupportsKind2
    from returns.result import Result

    _ValueType = TypeVar('_ValueType')
    _ErrorType = TypeVar('_ErrorType')

    class MyClass(
        SupportsKind2['MyClass', _ValueType, _ErrorType],
        IOResultLike2[_ValueType, _ErrorType],
    ):
        ...

    def test(arg: Result[str, float]) -> MyClass[bool, float]:
        ...

    x: MyClass[str, float]
    reveal_type(compose_result(test)(x))  # N: Revealed type is "main.MyClass[builtins.bool, builtins.float]"
