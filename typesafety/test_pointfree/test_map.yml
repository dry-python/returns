- case: map_variance
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.maybe import Maybe

    class A: ...
    class B(A): ...
    class C(B): ...

    x: Maybe[B]

    def test(a: A) -> C:
        ...

    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.maybe.Maybe[main.C*]'


- case: map_callback_protocol
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.pointfree import map_
    from returns.maybe import Maybe

    _ValueType = TypeVar('_ValueType', contravariant=True)
    _NewValueType = TypeVar('_NewValueType', covariant=True)

    def ensure_callback(
        f: Callable[[Maybe[_ValueType]], Maybe[_NewValueType]],
        c: Maybe[_ValueType],
    ) -> Maybe[_NewValueType]:
        return f(c)

    def test(arg: int) -> float:
        return arg + 1.5

    reveal_type(ensure_callback(map_(test), Maybe.from_value(1)))  # N: Revealed type is 'returns.maybe.Maybe[builtins.float*]'


- case: map_and_flow
  disable_cache: true
  main: |
    from returns.result import Result
    from returns.functions import identity
    from returns.pointfree import map_
    from returns.pipeline import flow

    def test(arg: int) -> float:
        ...

    def stringify(arg: float) -> str:
        ...

    r: Result[int, str]
    reveal_type(flow(r, map_(test), map_(stringify), identity))  # N: Revealed type is 'returns.result.Result*[builtins.str, builtins.str*]'


- case: map_and_bind
  disable_cache: True
  main: |
    from returns.io import IO
    from returns.pointfree import map_, bind
    from returns.result import Result, Success

    def test(arg: int) -> Result[float, str]:
        ...

    reveal_type(map_(bind(test))(IO(Success(1))))  # N: Revealed type is 'returns.io.IO[returns.result.Result*[builtins.float*, builtins.str*]]'


- case: map_io
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.io import IO

    def test(arg: float) -> int:
        ...

    reveal_type(map_(test)(IO(1.5)))  # N: Revealed type is 'returns.io.IO[builtins.int*]'


- case: map_maybe
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.maybe import Maybe

    def test(arg: float) -> int:
        ...

    reveal_type(map_(test)(Maybe.from_value(1.5)))  # N: Revealed type is 'returns.maybe.Maybe[builtins.int*]'


- case: map_result
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.result import Result

    def test(arg: float) -> int:
        ...

    x: Result[float, str]
    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.str*]'


- case: map_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.io import IOResult

    def test(arg: float) -> int:
        ...

    x: IOResult[float, str]
    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.io.IOResult[builtins.int, builtins.str*]'


- case: map_requires_context
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.context import RequiresContext

    def test(arg: float) -> int:
        ...

    x: RequiresContext[str, float]
    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.str*, builtins.int]'


- case: map_requires_context_result
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.context import RequiresContextResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextResult[bool, float, str]
    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.int, builtins.str*]'


- case: map_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextIOResult[bool, float, str]
    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool*, builtins.int, builtins.str*]'


- case: map_future
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.future import Future

    def test(arg: float) -> int:
        ...

    reveal_type(map_(test)(Future.from_value(1.5)))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: map_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import map_
    from returns.future import FutureResult

    def test(arg: float) -> int:
        ...

    x: FutureResult[float, str]
    reveal_type(map_(test)(x))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.str*]'
