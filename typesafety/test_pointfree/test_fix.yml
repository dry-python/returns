- case: fix_variance
  disable_cache: true
  main: |
    from returns.pointfree import fix
    from returns.result import Result

    class A: ...
    class B(A): ...
    class C(B): ...

    x: Result[str, B]

    def test(a: A) -> C:
        ...

    # TODO: this is probably a bug in mypy.
    # Should be `Result[main.C, main.B]`
    reveal_type(fix(test)(x))  # N: Revealed type is 'returns.result.Result[main.C, main.A]'


- case: fix_callback_protocol
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.pointfree import fix
    from returns.result import Result

    _ValueType = TypeVar('_ValueType', contravariant=True)
    _NewValueType = TypeVar('_NewValueType', covariant=True)
    _ErrorType = TypeVar('_ErrorType', contravariant=True)

    def ensure_callback(
        f: Callable[
          [Result[_ValueType, _ErrorType]],
          Result[_NewValueType, _ErrorType],
        ],
        c: Result[_ValueType, _ErrorType],
    ) -> Result[_NewValueType, _ErrorType]:
        return f(c)

    def test(arg: int) -> float:
        return arg + 1.5

    x: Result[str, int]
    reveal_type(ensure_callback(fix(test), x))  # N: Revealed type is 'returns.result.Result[builtins.float*, builtins.int]'


- case: fix_and_flow
  disable_cache: true
  main: |
    from returns.result import Result
    from returns.functions import identity
    from returns.pointfree import alt, fix
    from returns.pipeline import flow

    def test(arg: int) -> float:
        ...

    def stringify(arg: float) -> str:
        ...

    r: Result[bool, int]
    reveal_type(flow(r, alt(test), fix(stringify), identity))  # N: Revealed type is 'returns.result.Result*[builtins.str, builtins.float]'


- case: fix_result
  disable_cache: true
  main: |
    from returns.pointfree import fix
    from returns.result import Result

    def test(arg: float) -> int:
        ...

    x: Result[str, float]
    reveal_type(fix(test)(x))  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.float]'


- case: fix_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import fix
    from returns.io import IOResult

    def test(arg: float) -> int:
        ...

    x: IOResult[str, float]
    reveal_type(fix(test)(x))  # N: Revealed type is 'returns.io.IOResult[builtins.int, builtins.float]'


- case: fix_requires_context_result
  disable_cache: true
  main: |
    from returns.pointfree import fix
    from returns.context import RequiresContextResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextResult[bool, str, float]
    reveal_type(fix(test)(x))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.int, builtins.float]'


- case: fix_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import fix
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextIOResult[bool, str, float]
    reveal_type(fix(test)(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool*, builtins.int, builtins.float]'


- case: fix_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import fix
    from returns.future import FutureResult

    def test(arg: float) -> int:
        ...

    x: FutureResult[str, float]
    reveal_type(fix(test)(x))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.float]'
