- case: bind_optional_wrong_instance_type
  disable_cache: true
  main: |
    from returns.pointfree import bind_optional
    from returns.maybe import Maybe
    from typing import Optional

    def test(arg: float) -> Optional[int]:
        ...

    x: Maybe[str]
    bind_optional(test)(x)
  out: |
    main:9: error: Argument 1 has incompatible type "Maybe[str]"; expected "KindN[Maybe[Any], float, NoReturn, NoReturn]"


- case: bind_optional_maybe
  disable_cache: true
  main: |
    from returns.pointfree import bind_optional
    from returns.maybe import Maybe
    from typing import Optional

    def test(arg: float) -> Optional[str]:
        ...

    x: Maybe[float]
    reveal_type(bind_optional(test)(x))  # N: Revealed type is 'returns.maybe.Maybe*[builtins.str]'
