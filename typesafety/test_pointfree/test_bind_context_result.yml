- case: bind_context_result_wrong
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_result
    from returns.context import RequiresContextResult

    def test(arg: float) -> RequiresContextResult[int, str, str]:
        ...

    x: RequiresContextResult[float, str, bool]
    bind_context_result(test)(x)  # E: Argument 1 has incompatible type "RequiresContextResult[float, str, bool]"; expected "KindN[RequiresContextResult[Any, Any, Any], float, str, str]"  [arg-type]


- case: bind_context_result_requires_context_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_result
    from returns.context import RequiresContextResult

    def test(arg: float) -> RequiresContextResult[int, str, bool]:
        ...

    x: RequiresContextResult[float, str, bool]
    reveal_type(bind_context_result(test)(x))  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.int, builtins.str, builtins.bool]"


- case: bind_context_result_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_result
    from returns.context import RequiresContextResult, RequiresContextIOResult

    def test(arg: float) -> RequiresContextResult[int, str, bool]:
        ...

    x: RequiresContextIOResult[float, str, bool]
    reveal_type(bind_context_result(test)(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int, builtins.str, builtins.bool]"


- case: bind_context_result_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_result
    from returns.context import RequiresContextResult, RequiresContextFutureResult

    def test(arg: float) -> RequiresContextResult[int, str, bool]:
        ...

    x: RequiresContextFutureResult[float, str, bool]
    reveal_type(bind_context_result(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.str, builtins.bool]"
