- case: bind_awaitable_and_flow
  disable_cache: true
  main: |
    from returns.future import FutureResult
    from returns.functions import identity
    from returns.pointfree import bind_awaitable
    from returns.pipeline import flow

    async def test(arg: int) -> float:
        ...

    async def second(arg: float) -> bool:
        ...

    r: FutureResult[int, str]
    reveal_type(flow(r, bind_awaitable(test), bind_awaitable(second), identity))  # N: Revealed type is 'returns.future.FutureResult*[builtins.bool, builtins.str*]'


- case: bind_awaitable_and_bind
  disable_cache: True
  main: |
    from returns.future import FutureResult
    from returns.functions import identity
    from returns.pointfree import bind, bind_awaitable
    from returns.pipeline import flow

    async def test(arg: int) -> float:
        ...

    def second(arg: float) -> FutureResult[bool, str]:
        ...

    r: FutureResult[int, str]
    reveal_type(flow(r, bind_awaitable(test), bind(second)))  # N: Revealed type is 'returns.future.FutureResult[builtins.bool*, builtins.str*]'


- case: bind_awaitable_future
  disable_cache: true
  main: |
    from returns.pointfree import bind_awaitable
    from returns.future import Future

    async def test(arg: float) -> int:
        ...

    x: Future[float]
    reveal_type(bind_awaitable(test)(x))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: bind_awaitable_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_awaitable
    from returns.future import FutureResult

    async def test(arg: float) -> int:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_awaitable(test)(x))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.str*]'
