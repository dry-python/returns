- case: bind_awaitable_wrong_value
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.future import Future

    async def test(arg: str) -> int:
        ...

    x: Future[float]
    bind_awaitable(test)(x)  # E: Argument 1 has incompatible type "Future[float]"; expected "KindN[Future[Any], str, NoReturn, NoReturn]"  [arg-type]


- case: bind_awaitable_wrong_instance_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.io import IO

    async def test(arg: str) -> int:
        ...

    x: IO[float]
    bind_awaitable(test)(x)
  out: |
    main:8: error: Value of type variable "_FutureKind" of function cannot be "IO[Any]"  [type-var]
    main:8: error: Argument 1 has incompatible type "IO[float]"; expected "KindN[IO[Any], str, NoReturn, NoReturn]"  [arg-type]


- case: bind_awaitable_wrong_function_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.future import Future

    def test(arg: float) -> int:
        ...

    x: Future[float]
    bind_awaitable(test)(x)  # E: Argument 1 to "bind_awaitable" has incompatible type "Callable[[float], int]"; expected "Callable[[float], Awaitable[Never]]"  [arg-type]


- case: bind_awaitable_with_flow
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.pipeline import flow
    from returns.future import Future

    async def test1(arg: float) -> int:
        ...

    async def test2(arg: int) -> str:
        ...

    x: Future[float]
    reveal_type(flow(x, bind_awaitable(test1), bind_awaitable(test2)))  # N: Revealed type is "returns.future.Future[builtins.str]"


- case: bind_awaitable_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.context import RequiresContextFutureResult

    async def test(arg: float) -> int:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(bind_awaitable(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: bind_awaitable_future
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.future import Future

    async def test(arg: float) -> int:
        ...

    x: Future[float]
    reveal_type(bind_awaitable(test)(x))  # N: Revealed type is "returns.future.Future[builtins.int]"


- case: bind_awaitable_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.future import FutureResult

    async def test(arg: float) -> int:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_awaitable(test)(x))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.str]"


- case: bind_awaitable_custom_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_awaitable
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.specific.future import FutureLike1
    from returns.future import Future
    from typing import TypeVar

    T = TypeVar('T')
    N = TypeVar('N')

    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        ...

    async def test(arg: float) -> int:
        ...

    x: MyClass[float]
    reveal_type(bind_awaitable(test)(x))  # N: Revealed type is "main.MyClass[builtins.int]"
