- case: bind_context_ioresult_wrong
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_ioresult
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> RequiresContextIOResult[int, str, str]:
        ...

    x: RequiresContextIOResult[float, bool, bool]
    bind_context_ioresult(test)(x)  # E: Argument 1 has incompatible type "RequiresContextIOResult[float, bool, bool]"; expected "KindN[RequiresContextIOResult[Any, Any, Any], float, str, str]"  [arg-type]


- case: bind_context_ioresult_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_ioresult
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> RequiresContextIOResult[int, str, bool]:
        ...

    x: RequiresContextIOResult[float, str, bool]
    reveal_type(bind_context_ioresult(test)(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int, builtins.str, builtins.bool]"


- case: bind_context_ioresult_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_context_ioresult
    from returns.context import RequiresContextIOResult, RequiresContextFutureResult

    def test(arg: float) -> RequiresContextIOResult[int, str, bool]:
        ...

    x: RequiresContextFutureResult[float, str, bool]
    reveal_type(bind_context_ioresult(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.str, builtins.bool]"
