- case: bind_io_variance
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO

    class A: ...
    class B(A): ...
    class C(B): ...

    def test(a: A) -> IO[C]:
        ...

    x: IO[B]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.io.IO*[main.C]'


- case: bind_io_with_flow
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.pipeline import flow
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: IO[float]
    reveal_type(flow(x, bind_io(test)))  # N: Revealed type is 'returns.io.IO*[builtins.int]'


- case: bind_io_wrong_instance_type
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: IO[str]
    bind_io(test)(x)
  out: |
    main:8: error: Argument 1 has incompatible type "IO[str]"; expected "KindN[IO[Any], float, NoReturn, NoReturn]"


- case: bind_io_wrong_unsupported_type
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.maybe import Maybe
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: Maybe[str]
    bind_io(test)(x)
  out: |
    main:9: error: Argument 1 has incompatible type "Maybe[str]"; expected "KindN[Maybe[Any], float, NoReturn, NoReturn]"
    main:9: error: Value of type variable "_IOLikeKind" of function cannot be "Maybe[Any]"


- case: bind_io_io
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: IO[float]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.io.IO*[builtins.int]'

- case: bind_io_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO, IOResult

    def test(arg: float) -> IO[int]:
        ...

    x: IOResult[float, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.io.IOResult*[builtins.int, builtins.str*]'


- case: bind_io_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> IO[int]:
        ...

    x: RequiresContextIOResult[float, bool, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult*[builtins.int, builtins.bool*, builtins.str*]'


- case: bind_io_requires_context_future_result
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO
    from returns.context import RequiresContextFutureResult

    def test(arg: float) -> IO[int]:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult*[builtins.int, builtins.bool*, builtins.str*]'


- case: bind_io_future
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO
    from returns.future import Future

    def test(arg: float) -> IO[int]:
        ...

    x: Future[float]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.future.Future*[builtins.int]'


- case: bind_io_future_result
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO
    from returns.future import FutureResult

    def test(arg: float) -> IO[int]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.future.FutureResult*[builtins.int, builtins.str*]'


- case: bind_io_custom_type
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.interfaces.specific.io import IOLike1
    from returns.primitives.hkt import SupportsKind1
    from returns.io import IO
    from returns.pointfree import bind_io

    _ValueType = TypeVar('_ValueType')

    class MyClass(
        SupportsKind1['MyClass', _ValueType],
        IOLike1[_ValueType],
    ):
        ...

    def test(arg: float) -> IO[int]:
        ...

    x: MyClass[float]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'main.MyClass*[builtins.int]'
