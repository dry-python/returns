- case: bind_io_and_flow
  disable_cache: true
  main: |
    from returns.io import IO, IOResult
    from returns.functions import identity
    from returns.pointfree import bind_io
    from returns.pipeline import flow

    def test(arg: int) -> IO[float]:
        ...

    def second(arg: float) -> IO[bool]:
        ...

    r: IOResult[int, str]
    reveal_type(flow(r, bind_io(test), bind_io(second), identity))  # N: Revealed type is 'returns.io.IOResult*[builtins.bool, builtins.str*]'


- case: bind_io_and_bind
  disable_cache: True
  main: |
    from returns.io import IO, IOResult
    from returns.functions import identity
    from returns.pointfree import bind, bind_io
    from returns.pipeline import flow

    def test(arg: int) -> IO[float]:
        ...

    def second(arg: float) -> IOResult[bool, str]:
        ...

    r: IOResult[int, str]
    reveal_type(flow(r, bind_io(test), bind(second)))  # N: Revealed type is 'returns.io.IOResult[builtins.bool*, builtins.str*]'


- case: bind_io_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.io import IO, IOResult

    def test(arg: float) -> IO[int]:
        ...

    x: IOResult[float, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.io.IOResult[builtins.int, builtins.str*]'


- case: bind_io_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.context import RequiresContextIOResult
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: RequiresContextIOResult[bool, float, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool*, builtins.int, builtins.str*]'


- case: bind_io_future
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.future import Future
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: Future[float]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: bind_io_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_io
    from returns.future import FutureResult
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_io(test)(x))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.str*]'
