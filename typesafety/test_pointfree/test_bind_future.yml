- case: bind_async_future_with_flow
  disable_cache: false
  main: |
    from returns.pointfree import bind_future
    from returns.pipeline import flow
    from returns.future import Future, FutureResult

    def test1(arg: float) -> Future[int]:
        ...

    def test2(arg: int) -> Future[str]:
        ...

    x: FutureResult[float, str]
    reveal_type(flow(x, bind_future(test1), bind_future(test2)))  # N: Revealed type is "returns.future.FutureResult[builtins.str, builtins.str]"


- case: bind_future_wrong_function
  disable_cache: false
  main: |
    from returns.pointfree import bind_future
    from returns.future import Future

    async def test(arg: str) -> Future[int]:
        ...

    x: Future[str]
    bind_future(test)(x)  # E: Argument 1 to "bind_future" has incompatible type "Callable[[str], Coroutine[Any, Any, Future[int]]]"; expected "Callable[[str], Future[<nothing>]]"


- case: bind_future_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_future
    from returns.context import RequiresContextFutureResult
    from returns.future import Future

    def test(arg: float) -> Future[int]:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(bind_future(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: bind_future_future
  disable_cache: false
  main: |
    from returns.pointfree import bind_future
    from returns.future import Future

    def test(arg: float) -> Future[int]:
        ...

    x: Future[float]
    reveal_type(bind_future(test)(x))  # N: Revealed type is "returns.future.Future[builtins.int]"


- case: bind_future_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_future
    from returns.future import FutureResult, Future

    def test(arg: float) -> Future[int]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_future(test)(x))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.str]"


- case: bind_future_custom_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_future
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.specific.future import FutureLike1
    from returns.future import Future
    from typing import TypeVar

    T = TypeVar('T')

    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        ...

    def test(arg: float) -> Future[int]:
        ...

    x: MyClass[float]
    reveal_type(bind_future(test)(x))  # N: Revealed type is "main.MyClass[builtins.int]"
