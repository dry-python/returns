- case: bind_variance
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.maybe import Maybe

    class A: ...
    class B(A): ...
    class C(B): ...

    def test(a: A) -> Maybe[C]:
        ...

    x: Maybe[B]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.maybe.Maybe[main.C]"


- case: bind_wrong_instance_type
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: Result[str, str]
    bind(test)(x)
  out: |
    main:8: error: Argument 1 has incompatible type "Result[str, str]"; expected "KindN[Result[Any, Any], float, str, NoReturn]"


- case: bind_wrong_error_type
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.result import Result

    def test(arg: float) -> Result[int, Exception]:
        ...

    x: Result[float, str]
    bind(test)(x)
  out: |
    main:8: error: Argument 1 has incompatible type "Result[float, str]"; expected "KindN[Result[Any, Any], float, Exception, NoReturn]"


- case: bind_with_flow
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.pipeline import flow
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: Result[float, str]
    reveal_type(flow(x, bind(test)))  # N: Revealed type is "returns.result.Result[builtins.int, builtins.str]"


- case: bind_io
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    x: IO[float]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.io.IO[builtins.int]"


- case: bind_maybe
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.maybe import Maybe

    def test(arg: float) -> Maybe[int]:
        ...

    x: Maybe[float]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.maybe.Maybe[builtins.int]"


- case: bind_result
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    x: Result[float, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.result.Result[builtins.int, builtins.str]"


- case: bind_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    x: IOResult[float, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.io.IOResult[builtins.int, builtins.str]"


- case: bind_requires_context
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContext[float, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.context.requires_context.RequiresContext[builtins.int, builtins.str]"


- case: bind_requires_context_result
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContextResult

    def test(arg: float) -> RequiresContextResult[int, bool, str]:
        ...

    x: RequiresContextResult[float, bool, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.int, builtins.bool, builtins.str]"


- case: bind_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> RequiresContextIOResult[int, bool, str]:
        ...

    x: RequiresContextIOResult[float, bool, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.int, builtins.bool, builtins.str]"


- case: bind_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContextFutureResult

    def test(arg: float) -> RequiresContextFutureResult[int, bool, str]:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: bind_future
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.future import Future

    def test(arg: float) -> Future[int]:
        ...

    x: Future[float]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.future.Future[builtins.int]"


- case: bind_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.future import FutureResult

    def test(arg: float) -> FutureResult[int, str]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind(test)(x))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.str]"


- case: bind_custom_type
  disable_cache: false
  main: |
    from returns.pointfree import bind
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.bindable import Bindable1
    from typing import TypeVar

    T = TypeVar('T')
    N = TypeVar('N')

    class MyOwn(
        SupportsKind1['MyOwn', T],
        Bindable1[T],
    ):
        ...

    def test(arg: float) -> MyOwn[int]:
        ...

    x: MyOwn[float]
    reveal_type(bind(test)(x))  # N: Revealed type is "main.MyOwn[builtins.int]"
