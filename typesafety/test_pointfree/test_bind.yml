- case: bind_io
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.io.IO[builtins.float*]) -> returns.io.IO[builtins.int*]'


- case: bind_maybe
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.maybe import Maybe

    def test(arg: float) -> Maybe[int]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.maybe.Maybe[builtins.float*]) -> returns.maybe.Maybe[builtins.int*]'


- case: bind_result
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.result.Result[builtins.float*, builtins.str*]) -> returns.result.Result[builtins.int*, builtins.str*]'


- case: bind_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.io.IOResult[builtins.float*, builtins.str*]) -> returns.io.IOResult[builtins.int*, builtins.str*]'


- case: bind_context
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.context.RequiresContext[builtins.int*, builtins.float*]) -> returns.context.RequiresContext[builtins.int*, builtins.str*]'
