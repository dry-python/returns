- case: bind_variance
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.maybe import Maybe

    class A: ...
    class B(A): ...
    class C(B): ...

    x: Maybe[B]

    def test(a: A) -> Maybe[C]:
        ...

    reveal_type(bind(test)(x))  # N: Revealed type is 'returns.maybe.Maybe[main.C*]'


- case: bind_wrong_error_type
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.result import Result

    def test(arg: float) -> Result[int, Exception]:
        ...

    x: Result[float, str]
    reveal_type(bind(test)(x))
  out: |
    main:8: error: Argument 1 has incompatible type "Result[float, str]"; expected "Result[float, Exception]"
    main:8: note: Revealed type is 'returns.result.Result[builtins.int*, builtins.Exception*]'


- case: bind_io
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.io import IO

    def test(arg: float) -> IO[int]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.io.IO[builtins.float*]) -> returns.io.IO[builtins.int*]'


- case: bind_maybe
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.maybe import Maybe

    def test(arg: float) -> Maybe[int]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.maybe.Maybe[builtins.float*]) -> returns.maybe.Maybe[builtins.int*]'


- case: bind_result
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.result import Result

    def test(arg: float) -> Result[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.result.Result[builtins.float*, builtins.str*]) -> returns.result.Result[builtins.int*, builtins.str*]'


- case: bind_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.io import IOResult

    def test(arg: float) -> IOResult[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.io.IOResult[builtins.float*, builtins.str*]) -> returns.io.IOResult[builtins.int*, builtins.str*]'


- case: bind_requires_context
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.context.requires_context.RequiresContext[builtins.int*, builtins.float*]) -> returns.context.requires_context.RequiresContext[builtins.int*, builtins.str*]'


- case: bind_requires_context_result
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContextResult

    def test(arg: float) -> RequiresContextResult[bool, int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float*, builtins.str*]) -> returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.int*, builtins.str*]'


- case: bind_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> RequiresContextIOResult[bool, int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool*, builtins.float*, builtins.str*]) -> returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool*, builtins.int*, builtins.str*]'


- case: bind_future
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.future import Future

    def test(arg: float) -> Future[int]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.future.Future[builtins.float*]) -> returns.future.Future[builtins.int*]'


- case: bind_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import bind
    from returns.future import FutureResult

    def test(arg: float) -> FutureResult[int, str]:
        ...

    reveal_type(bind(test))  # N: Revealed type is 'def (returns.future.FutureResult[builtins.float*, builtins.str*]) -> returns.future.FutureResult[builtins.int*, builtins.str*]'

