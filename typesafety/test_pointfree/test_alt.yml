- case: alt_variance
  disable_cache: true
  main: |
    from returns.pointfree import alt
    from returns.result import Result

    class A: ...
    class B(A): ...
    class C(B): ...

    x: Result[str, B]

    def test(a: A) -> C:
        ...

    reveal_type(alt(test)(x))  # N: Revealed type is 'returns.result.Result[builtins.str*, main.C]'


- case: alt_callback_protocol
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.pointfree import alt
    from returns.result import Result

    _ValueType = TypeVar('_ValueType', contravariant=True)
    _ErrorType = TypeVar('_ErrorType', contravariant=True)
    _NewErrorType = TypeVar('_NewErrorType', covariant=True)

    def ensure_callback(
        f: Callable[
          [Result[_ValueType, _ErrorType]],
          Result[_ValueType, _NewErrorType],
        ],
        c: Result[_ValueType, _ErrorType],
    ) -> Result[_ValueType, _NewErrorType]:
        return f(c)

    def test(arg: int) -> float:
        return arg + 1.5

    x: Result[str, int]
    reveal_type(ensure_callback(alt(test), x))  # N: Revealed type is 'returns.result.Result[builtins.str, builtins.float*]'


- case: alt_and_flow
  disable_cache: true
  main: |
    from returns.result import Result
    from returns.functions import identity
    from returns.pointfree import alt
    from returns.pipeline import flow

    def test(arg: int) -> float:
        ...

    def stringify(arg: float) -> str:
        ...

    r: Result[bool, int]
    reveal_type(flow(r, alt(test), alt(stringify), identity))  # N: Revealed type is 'returns.result.Result*[builtins.bool*, builtins.str]'


- case: alt_result
  disable_cache: true
  main: |
    from returns.pointfree import alt
    from returns.result import Result

    def test(arg: float) -> int:
        ...

    x: Result[str, float]
    reveal_type(alt(test)(x))  # N: Revealed type is 'returns.result.Result[builtins.str*, builtins.int]'


- case: alt_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import alt
    from returns.io import IOResult

    def test(arg: float) -> int:
        ...

    x: IOResult[str, float]
    reveal_type(alt(test)(x))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, builtins.int]'


- case: alt_requires_context_result
  disable_cache: true
  main: |
    from returns.pointfree import alt
    from returns.context import RequiresContextResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextResult[bool, str, float]
    reveal_type(alt(test)(x))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.str*, builtins.int]'


- case: alt_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import alt
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextIOResult[bool, str, float]
    reveal_type(alt(test)(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool*, builtins.str*, builtins.int]'


- case: alt_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import alt
    from returns.future import FutureResult

    def test(arg: float) -> int:
        ...

    x: FutureResult[str, float]
    reveal_type(alt(test)(x))  # N: Revealed type is 'returns.future.FutureResult[builtins.str*, builtins.int]'
