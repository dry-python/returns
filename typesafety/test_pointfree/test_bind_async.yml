- case: bind_async_wrong_value
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.future import Future

    async def test(arg: str) -> Future[int]:
        ...

    x: Future[float]
    bind_async(test)(x)  # E: Argument 1 has incompatible type "Future[float]"; expected "KindN[Future[Any], str, NoReturn, NoReturn]"  [arg-type]


- case: bind_async_wrong_second_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.future import FutureResult

    async def test(arg: str) -> FutureResult[int, str]:
        ...

    x: FutureResult[str, bool]
    bind_async(test)(x)  # E: Argument 1 has incompatible type "FutureResult[str, bool]"; expected "KindN[FutureResult[Any, Any], str, str, NoReturn]"  [arg-type]


- case: bind_async_wrong_instance_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.io import IO

    async def test(arg: str) -> IO[int]:
        ...

    x: IO[float]
    bind_async(test)(x)
  out: |
    main:8: error: Value of type variable "_FutureKind" of "bind_async" cannot be "IO[Any]"  [type-var]
    main:8: error: Argument 1 has incompatible type "IO[float]"; expected "KindN[IO[Any], str, NoReturn, NoReturn]"  [arg-type]


- case: bind_async_wrong_function_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.future import Future

    def test(arg: float) -> Future[int]:
        ...

    x: Future[float]
    bind_async(test)(x)
  out: |
    main:8: error: Value of type variable "_FutureKind" of "bind_async" cannot be "IO[Any]"  [type-var]
    main:8: error: Argument 1 has incompatible type "Future[float]"; expected "KindN[IO[Any], float, NoReturn, NoReturn]"  [arg-type]
    main:8: note: Maybe you forgot to use "await"?


- case: bind_async_with_flow
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.pipeline import flow
    from returns.future import Future

    async def test1(arg: float) -> Future[int]:
        ...

    async def test2(arg: int) -> Future[str]:
        ...

    x: Future[float]
    reveal_type(flow(x, bind_async(test1), bind_async(test2)))  # N: Revealed type is "returns.future.Future[builtins.str]"


- case: bind_async_requires_context_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.context import RequiresContextFutureResult

    async def test(arg: float) -> RequiresContextFutureResult[int, bool, str]:
        ...

    x: RequiresContextFutureResult[float, bool, str]
    reveal_type(bind_async(test)(x))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.int, builtins.bool, builtins.str]"


- case: bind_async_future
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.future import Future

    async def test(arg: float) -> Future[int]:
        ...

    x: Future[float]
    reveal_type(bind_async(test)(x))  # N: Revealed type is "returns.future.Future[builtins.int]"


- case: bind_async_future_result
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.future import FutureResult

    async def test(arg: float) -> FutureResult[int, str]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_async(test)(x))  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.str]"


- case: bind_async_custom_type
  disable_cache: false
  main: |
    from returns.pointfree import bind_async
    from returns.primitives.hkt import SupportsKind1
    from returns.interfaces.specific.future import FutureLike1
    from typing import TypeVar

    T = TypeVar('T')

    class MyClass(
        SupportsKind1['MyClass', T],
        FutureLike1[T],
    ):
        ...

    async def test(arg: float) -> MyClass[int]:
        ...

    x: MyClass[float]
    reveal_type(bind_async(test)(x))  # N: Revealed type is "main.MyClass[builtins.int]"
