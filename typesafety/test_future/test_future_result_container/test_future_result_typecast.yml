- case: future_result_correct_cast
  disable_cache: false
  main: |
    from returns.future import FutureResult, FutureResultE

    first: FutureResult[int, Exception]
    second: FutureResultE[int]

    test1: FutureResultE[int] = first
    test2: FutureResult[int, Exception] = second

    reveal_type(first)  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.Exception]"
    reveal_type(second)  # N: Revealed type is "returns.future.FutureResult[builtins.int, builtins.Exception]"


- case: future_result_covariant_cast
  disable_cache: false
  main: |
    from returns.future import FutureResult

    first: FutureResult[TypeError, ValueError]  # we cast both values
    second: FutureResult[Exception, Exception] = first
    reveal_type(second)  # N: Revealed type is "returns.future.FutureResult[builtins.Exception, builtins.Exception]"


- case: future_result_from_typecast
  disable_cache: false
  main: |
    from returns.future import Future, FutureResult
    from returns.result import Result

    first: Result[int, str]

    reveal_type(FutureResult.from_typecast(Future.from_value(first)))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, builtins.str*]"


- case: future_result_constructor
  disable_cache: false
  main: |
    from returns.future import FutureResult
    from returns.result import Result

    async def test() -> Result[int, str]:
        ...

    reveal_type(FutureResult(test()))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, builtins.str*]"
    reveal_type(FutureResult.from_value(1))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, Any]"
    reveal_type(FutureResult.from_failure(1))  # N: Revealed type is "returns.future.FutureResult[Any, builtins.int*]"


- case: future_result_unit_functions
  disable_cache: false
  main: |
    from returns.future import FutureSuccess, FutureFailure

    reveal_type(FutureSuccess(1))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, Any]"
    reveal_type(FutureFailure(1))  # N: Revealed type is "returns.future.FutureResult[Any, builtins.int*]"


- case: future_result_from_result
  disable_cache: false
  main: |
    from returns.future import FutureResult
    from returns.result import Result, Success, Failure

    reveal_type(FutureResult.from_result(Success(1)))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, Any]"
    reveal_type(FutureResult.from_result(Failure(1)))  # N: Revealed type is "returns.future.FutureResult[Any, builtins.int*]"


- case: future_result_from_io
  disable_cache: false
  main: |
    from returns.future import FutureResult
    from returns.io import IO, IOSuccess, IOFailure

    reveal_type(FutureResult.from_ioresult(IOSuccess(1)))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, Any]"
    reveal_type(FutureResult.from_ioresult(IOFailure(1)))  # N: Revealed type is "returns.future.FutureResult[Any, builtins.int*]"
    reveal_type(FutureResult.from_io(IO(1)))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, Any]"
    reveal_type(FutureResult.from_failed_io(IO(1)))  # N: Revealed type is "returns.future.FutureResult[Any, builtins.int*]"


- case: future_result_from_future
  disable_cache: false
  main: |
    from returns.future import Future, FutureResult

    reveal_type(FutureResult.from_future(Future.from_value(1)))  # N: Revealed type is "returns.future.FutureResult[builtins.int*, Any]"
    reveal_type(FutureResult.from_failed_future(Future.from_value(1)))  # N: Revealed type is "returns.future.FutureResult[Any, builtins.int*]"
