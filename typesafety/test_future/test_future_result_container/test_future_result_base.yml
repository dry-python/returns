- case: future_result_awaitable
  disable_cache: true
  main: |
    from returns.future import FutureResult

    async def main() -> None:
        reveal_type(await FutureResult.from_value(1))  # N: Revealed type is 'returns.io.IOResult[builtins.int*, Any]'
        reveal_type(await FutureResult.from_value(1).awaitable())  # N: Revealed type is 'returns.io.IOResult*[builtins.int*, Any]'
        reveal_type(await FutureResult.from_failure(1))  # N: Revealed type is 'returns.io.IOResult[Any, builtins.int*]'
        reveal_type(await FutureResult.from_failure(1).awaitable())  # N: Revealed type is 'returns.io.IOResult*[Any, builtins.int*]'


- case: future_result_bind
  disable_cache: true
  main: |
    from returns.future import FutureResult

    def bind_future(arg: int) -> FutureResult[float, str]:
        ...

    first: FutureResult[int, str]

    reveal_type(first.bind(bind_future))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_bind_awaitable
  disable_cache: true
  main: |
    from returns.future import FutureResult

    async def bind_awaitable(arg: int) -> float:
        ...

    first: FutureResult[int, str]

    reveal_type(first.bind_awaitable(bind_awaitable))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_bind_async
  disable_cache: true
  main: |
    from returns.future import FutureResult

    async def bind_async(arg: int) -> FutureResult[float, str]:
        ...

    first: FutureResult[int, str]

    reveal_type(first.bind_async(bind_async))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_bind_result
  disable_cache: true
  main: |
    from returns.future import FutureResult
    from returns.result import Result

    def bind(arg: int) -> Result[float, str]:
        ...

    first: FutureResult[int, str]

    reveal_type(first.bind_result(bind))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_bind_ioresult
  disable_cache: true
  main: |
    from returns.future import FutureResult
    from returns.io import IOResult

    def bind(arg: int) -> IOResult[float, str]:
        ...

    first: FutureResult[int, str]

    reveal_type(first.bind_ioresult(bind))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_map
  disable_cache: true
  main: |
    from returns.future import FutureResult

    first: FutureResult[int, str]

    reveal_type(first.map(float))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_apply
  disable_cache: true
  main: |
    from typing import Callable
    from returns.future import FutureResult

    first: FutureResult[int, str]
    second: FutureResult[Callable[[int], float], str]

    reveal_type(first.apply(second))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.str]'


- case: future_result_alt
  disable_cache: true
  main: |
    from returns.future import FutureResult

    first: FutureResult[int, int]

    reveal_type(first.alt(float))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.float*]'


- case: future_result_fix
  disable_cache: true
  main: |
    from returns.future import FutureResult

    first: FutureResult[int, int]

    reveal_type(first.fix(float))  # N: Revealed type is 'returns.future.FutureResult[builtins.float*, builtins.int]'


- case: future_result_rescue
  disable_cache: true
  main: |
    from returns.future import FutureResult

    def bind(arg: str) -> FutureResult[int, float]:
        ...

    first: FutureResult[int, str]

    reveal_type(first.rescue(bind))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.float*]'
