- case: future_decorator_with_args
  disable_cache: true
  main: |
    from typing import Optional
    from returns.future import future

    @future
    async def test(
        first: int, second: Optional[str] = None, *, kw: bool = True,
    ) -> int:
        ...

    reveal_type(test)  # N: Revealed type is 'def (first: builtins.int, second: Union[builtins.str, None] =, *, kw: builtins.bool =) -> returns.future.Future[builtins.int*]'


- case: future_composition
  disable_cache: true
  main: |
    from returns.future import future

    async def test(first: int) -> str:
        ...

    reveal_type(future(test))  # N: Revealed type is 'def (first: builtins.int) -> returns.future.Future[builtins.str*]'
