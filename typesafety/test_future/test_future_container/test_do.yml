- case: do_sync_error
  skip: sys.version_info[:2] < (3, 8)
  disable_cache: false
  main: |
    from returns.future import Future

    Future.do(
        x + 1
        for x in Future.from_value(1)
    )
  out: |
    main:3: error: Argument 1 to "do" of "Future" has incompatible type "Generator[Any, None, None]"; expected "AsyncGenerator[<nothing>, None]"
    main:5: error: "Future[int]" has no attribute "__iter__"; maybe "__aiter__"? (not iterable)


- case: do_types_missmatch
  disable_cache: false
  main: |
    from returns.future import Future, FutureSuccess

    Future.do(
        x + y
        async for x in FutureSuccess(1)  # E: Invalid type supplied in do-notation: expected "returns.future.Future[Any]", got "returns.future.FutureResult[builtins.int*, Any]"
        async for y in Future.from_value(2.5)
    )


- case: do_with_if
  skip: sys.version_info[:2] < (3, 8)
  disable_cache: false
  main: |
    from returns.future import Future

    Future.do(  # E: Using "if" conditions inside a generator is not allowed
        x + y
        async for x in Future.from_value(1)
        async for y in Future.from_value(2.5)
        if y > 5
    )


- case: do_with_var
  disable_cache: false
  main: |
    from returns.future import Future

    x = (
        x + y
        async for x in Future.from_value(1)
        async for y in Future.from_value(2.5)
    )

    Future.do(x)  # E: Literal generator expression is required, not a variable or function call
