- case: fold_collect_all_iterable_types
  disable_cache: false
  main: |
    from typing import List, Iterable, Sequence, Iterator, Tuple, Generator
    from returns.result import Result
    from returns.iterables import Fold

    x1: List[Result[int, str]]
    x2: Iterable[Result[int, str]]
    x3: Sequence[Result[int, str]]
    x4: Iterator[Result[int, str]]
    x5: Tuple[Result[int, str], ...]
    x6: Tuple[Result[int, str]]
    x7: Generator[Result[int, str], None, None]

    acc: Result[Tuple[()], str]

    reveal_type(Fold.collect_all(x1, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"
    reveal_type(Fold.collect_all(x2, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"
    reveal_type(Fold.collect_all(x3, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"
    reveal_type(Fold.collect_all(x4, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"
    reveal_type(Fold.collect_all(x5, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"
    reveal_type(Fold.collect_all(x6, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"
    reveal_type(Fold.collect_all(x7, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.int, ...], builtins.str]"


- case: fold_collect_all_wrong_type
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.io import IO
    from typing import Iterable

    acc = IO(())
    x: Iterable[IO[float]]
    Fold.collect_all(x, acc)  # E: Value of type variable "_FailableKind" of "collect_all" of "AbstractFold" cannot be "IO[Any]"  [type-var]


- case: fold_collect_all_maybe
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.maybe import Maybe
    from typing import Iterable

    acc = Maybe.from_value(())
    x: Iterable[Maybe[float]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.maybe.Maybe[builtins.tuple[builtins.float, ...]]"


- case: fold_collect_all_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.result import Result
    from typing import Iterable, Tuple

    acc: Result[Tuple[()], str]
    x: Iterable[Result[float, str]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.result.Result[builtins.tuple[builtins.float, ...], builtins.str]"


- case: fold_collect_all_ioresult
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.io import IOResult
    from typing import Iterable, Tuple

    acc: IOResult[Tuple[()], str]
    x: Iterable[IOResult[float, str]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.io.IOResult[builtins.tuple[builtins.float, ...], builtins.str]"


- case: fold_collect_all_requires_context_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContextResult
    from typing import Iterable, Tuple

    acc: RequiresContextResult[Tuple[()], str, bool]
    x: Iterable[RequiresContextResult[float, str, bool]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.context.requires_context_result.RequiresContextResult[builtins.tuple[builtins.float, ...], builtins.str, builtins.bool]"


- case: fold_collect_all_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContextIOResult
    from typing import Iterable, Tuple

    acc: RequiresContextIOResult[Tuple[()], str, bool]
    x: Iterable[RequiresContextIOResult[float, str, bool]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.tuple[builtins.float, ...], builtins.str, builtins.bool]"


- case: fold_collect_all_requires_context_future_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContextFutureResult
    from typing import Iterable, Tuple

    acc: RequiresContextFutureResult[Tuple[()], str, bool]
    x: Iterable[RequiresContextFutureResult[float, str, bool]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.tuple[builtins.float, ...], builtins.str, builtins.bool]"


- case: fold_collect_all_future_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.future import FutureResult
    from typing import Iterable, Tuple

    acc: FutureResult[Tuple[()], str]
    x: Iterable[FutureResult[float, str]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "returns.future.FutureResult[builtins.tuple[builtins.float, ...], builtins.str]"


- case: fold_collect_all_custom_type
  disable_cache: false
  main: |
    from typing import TypeVar,  Iterable, Tuple
    from returns.iterables import Fold
    from returns.interfaces.failable import Failable2
    from returns.primitives.hkt import SupportsKind2

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(SupportsKind2['MyClass', V, N], Failable2[V, N]):
        ...

    acc: MyClass[Tuple[()], str]
    x: Iterable[MyClass[float, str]]
    reveal_type(Fold.collect_all(x, acc))  # N: Revealed type is "main.MyClass[builtins.tuple[builtins.float, ...], builtins.str]"
