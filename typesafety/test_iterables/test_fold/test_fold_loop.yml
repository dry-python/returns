- case: fold_loop_iterable_types
  disable_cache: false
  main: |
    from typing import (
        List, Iterable, Sequence, Iterator, Tuple, Generator, Callable,
    )
    from returns.result import Result
    from returns.iterables import Fold

    x1: List[Result[int, str]]
    x2: Iterable[Result[int, str]]
    x3: Sequence[Result[int, str]]
    x4: Iterator[Result[int, str]]
    x5: Tuple[Result[int, str], ...]
    x6: Tuple[Result[int, str]]
    x7: Generator[Result[int, str], None, None]

    acc: Result[float, str]

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    reveal_type(Fold.loop(x1, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'
    reveal_type(Fold.loop(x2, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'
    reveal_type(Fold.loop(x3, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'
    reveal_type(Fold.loop(x4, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'
    reveal_type(Fold.loop(x5, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'
    reveal_type(Fold.loop(x6, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'
    reveal_type(Fold.loop(x7, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'


- case: fold_loop_io
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.io import IO
    from typing import Iterable, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: IO[float]
    x: Iterable[IO[int]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.io.IO[builtins.float]'


- case: fold_loop_maybe
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.maybe import Maybe
    from typing import Iterable, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: Maybe[float]
    x: Iterable[Maybe[int]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.maybe.Maybe[builtins.float]'


- case: fold_loop_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.result import Result
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: Result[float, str]
    x: Iterable[Result[int, str]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.result.Result[builtins.float, builtins.str]'


- case: fold_loop_ioresult
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.io import IOResult
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: IOResult[float, str]
    x: Iterable[IOResult[int, str]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.io.IOResult[builtins.float, builtins.str]'


- case: fold_loop_requires_context
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContext
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: RequiresContext[float, str]
    x: Iterable[RequiresContext[int, str]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.float, builtins.str]'


- case: fold_loop_requires_context_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContextResult
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: RequiresContextResult[float, str, bool]
    x: Iterable[RequiresContextResult[int, str, bool]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.float, builtins.str, builtins.bool]'


- case: fold_loop_requires_context_ioresult
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContextIOResult
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: RequiresContextIOResult[float, str, bool]
    x: Iterable[RequiresContextIOResult[int, str, bool]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.float, builtins.str, builtins.bool]'


- case: fold_loop_requires_context_future_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.context import RequiresContextFutureResult
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: RequiresContextFutureResult[float, str, bool]
    x: Iterable[RequiresContextFutureResult[int, str, bool]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.float, builtins.str, builtins.bool]'


- case: fold_loop_future
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.future import Future
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: Future[float]
    x: Iterable[Future[int]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.future.Future[builtins.float]'


- case: fold_loop_future_result
  disable_cache: false
  main: |
    from returns.iterables import Fold
    from returns.future import FutureResult
    from typing import Iterable, Tuple, Callable

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: FutureResult[float, str]
    x: Iterable[FutureResult[int, str]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'returns.future.FutureResult[builtins.float, builtins.str]'


- case: fold_loop_custom_type
  disable_cache: false
  main: |
    from typing import TypeVar,  Iterable, Tuple, Callable
    from returns.iterables import Fold
    from returns.interfaces.applicative import Applicative1
    from returns.primitives.hkt import SupportsKind1

    V = TypeVar('V')

    class MyClass(SupportsKind1['MyClass', V], Applicative1[V]):
        ...

    def div(first: int) -> Callable[[float], float]:
        return lambda second: first / second

    acc: MyClass[float]
    x: Iterable[MyClass[int]]
    reveal_type(Fold.loop(x, acc, div))  # N: Revealed type is 'main.MyClass[builtins.float]'
