- case: failure_lash
  disable_cache: false
  main: |
    from returns.result import Failure, Result

    def returns_result(param: int) -> Result[str, Exception]:
        ...

    first: Result[str, int] = Failure(1)
    reveal_type(first.lash(returns_result))  # N: Revealed type is "returns.result.Result[builtins.str, builtins.Exception]"


- case: failure_alt
  disable_cache: false
  main: |
    from returns.result import Failure

    reveal_type(Failure(1).alt(str))  # N: Revealed type is "returns.result.Result[Any, builtins.str]"


- case: failure_failure
  disable_cache: false
  main: |
    from returns.result import Failure

    reveal_type(Failure(1).failure())  # N: Revealed type is "builtins.int"


- case: failure_bind_composite_error
  disable_cache: false
  main: |
    from returns.result import Success, Failure, Result

    def first_function(value: int) -> Result[str, ValueError]:
        ...

    def second_function(value: str) -> Result[bool, KeyError]:
        ...

    result = Failure(0).bind(first_function).bind(second_function)
    reveal_type(result)  # N: Revealed type is "returns.result.Result[builtins.bool, Union[builtins.int, builtins.ValueError, builtins.KeyError]]"
