- case: result_success_cast1
  disable_cache: false
  main: |
    from returns.result import Result, Success

    first: Result[int, Exception] = Success(1)
    reveal_type(first)  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.Exception]'


- case: result_success_cast2
  disable_cache: false
  main: |
    from returns.result import Result, Success

    first: Result[object, Exception] = Success(1)
    reveal_type(first)  # N: Revealed type is 'returns.result.Result[builtins.object, builtins.Exception]'


- case: result_failure_cast1
  disable_cache: false
  main: |
    from returns.result import Result, Failure

    first: Result[int, Exception] = Failure(Exception())
    reveal_type(first)  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.Exception]'


- case: result_failure_cast2
  disable_cache: false
  main: |
    from returns.result import Result, Failure

    first: Result[int, Exception] = Failure(TypeError())
    reveal_type(first)  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.Exception]'


- case: result_swap
  disable_cache: false
  main: |
    from returns.result import Result

    x: Result[int, str]
    reveal_type(x.swap())  # N: Revealed type is 'returns.result.Result[builtins.str*, builtins.int*]'


- case: result_getattr
  disable_cache: false
  main: |
    from returns.result import Result

    x: Result[int, str]
    x.missing  # E: "Result[int, str]" has no attribute "missing"


- case: result_from_value
  disable_cache: false
  main: |
    from returns.result import Result

    reveal_type(Result.from_value(1))  # N: Revealed type is 'returns.result.Result[builtins.int*, Any]'


- case: result_from_failure
  disable_cache: false
  main: |
    from returns.result import Result

    reveal_type(Result.from_failure(1))  # N: Revealed type is 'returns.result.Result[Any, builtins.int*]'


- case: result_from_result
  disable_cache: false
  main: |
    from returns.result import Result

    x: Result[int ,str]
    reveal_type(Result.from_result(x))  # N: Revealed type is 'returns.result.Result[builtins.int*, builtins.str*]'


- case: result_from_iterable1
  disable_cache: false
  main: |
    from returns.result import Result
    from typing import List, Iterable, Sequence, Iterator, Tuple

    x1: List[Result[int, str]]
    x2: Iterable[Result[int, str]]
    x3: Sequence[Result[int, str]]
    x4: Iterator[Result[int, str]]
    x5: Tuple[Result[int, str], ...]

    reveal_type(Result.from_iterable(x1))  # N: Revealed type is 'returns.result.Result[typing.Sequence[builtins.int*], builtins.str*]'
    reveal_type(Result.from_iterable(x2))  # N: Revealed type is 'returns.result.Result[typing.Sequence[builtins.int*], builtins.str*]'
    reveal_type(Result.from_iterable(x3))  # N: Revealed type is 'returns.result.Result[typing.Sequence[builtins.int*], builtins.str*]'
    reveal_type(Result.from_iterable(x4))  # N: Revealed type is 'returns.result.Result[typing.Sequence[builtins.int*], builtins.str*]'
    reveal_type(Result.from_iterable(x5))  # N: Revealed type is 'returns.result.Result[typing.Sequence[builtins.int*], builtins.str*]'


- case: result_from_iterable2
  disable_cache: false
  main: |
    from returns.result import Result
    from returns.primitives.iterables import CollectAll
    from typing import Iterable

    x: Iterable[Result[int, str]]

    reveal_type(Result.from_iterable(x, CollectAll))  # N: Revealed type is 'returns.result.Result[typing.Sequence[builtins.int*], builtins.str*]'


- case: result_covariant_cast
  disable_cache: false
  main: |
    from returns.result import Result

    first: Result[TypeError, ValueError]  # we cast both values
    second: Result[Exception, Exception] = first
    reveal_type(second)  # N: Revealed type is 'returns.result.Result[builtins.Exception, builtins.Exception]'


- case: result_success_bind_contra1
  disable_cache: false
  main: |
    from returns.result import Result, Success

    def test(some: int) -> Result[float, str]:
      ...

    first: Result[int, str] = Success(4)
    reveal_type(first.bind(test))  # N: Revealed type is 'returns.result.Result[builtins.float*, builtins.str]'


- case: result_success_bind_contra2
  disable_cache: false
  main: |
    from returns.result import Result, Success

    def test(some: int) -> Result[int, ValueError]:
      ...

    first: Result[int, Exception]
    second = first.bind(test)
    reveal_type(second)  # N: Revealed type is 'returns.result.Result[builtins.int*, builtins.Exception]'


- case: result_correct_usage
  disable_cache: false
  main: |
    from returns.result import Result, Success, Failure

    def factory(inner_value: int) -> Result[int, str]:
        if inner_value > 0:
            return Success(inner_value * 2)
        return Failure(str(inner_value))

    reveal_type(factory(1))  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.str]'


- case: result_success_type
  disable_cache: false
  main: |
    from returns.result import Result

    reveal_type(Result.success_type)  # N: Revealed type is 'Type[returns.result._Success[Any]]'


- case: result_failure_type
  disable_cache: false
  main: |
    from returns.result import Result

    reveal_type(Result.failure_type)  # N: Revealed type is 'Type[returns.result._Failure[Any]]'


- case: resulte_typecast1
  disable_cache: false
  main: |
    from returns.result import Result, ResultE, Success, Failure

    def function(arg: int) -> ResultE[int]:
        if arg > 0:
            return Success(arg + 1)
        return Failure(ValueError(arg))

    result: Result[int, Exception] = function(1)
    reveal_type(result)  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.Exception]'


- case: resulte_typecast2
  disable_cache: false
  main: |
    from returns.result import Result, ResultE, Success, Failure

    def function(arg: int) -> Result[int, Exception]:
        if arg > 0:
            return Success(arg + 1)
        return Failure(ValueError(arg))

    result: ResultE[int] = function(1)
    reveal_type(result)  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.Exception]'
