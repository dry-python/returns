- case: success_bind
  disable_cache: false
  main: |
    from returns.result import Success, Result

    def returns_result(param: int) -> Result[str, Exception]:
        ...

    first: Result[int, Exception] = Success(1)
    reveal_type(first.bind(returns_result))  # N: Revealed type is 'returns.result.Result[builtins.str*, builtins.Exception]'


- case: success_bind_result
  disable_cache: false
  main: |
    from returns.result import Success, Result

    def returns_result(param: int) -> Result[str, Exception]:
        ...

    first: Result[int, Exception] = Success(1)
    reveal_type(first.bind_result(returns_result))  # N: Revealed type is 'returns.result.Result[builtins.str*, builtins.Exception]'


- case: success_map
  disable_cache: false
  main: |
    from returns.result import Success, Result

    reveal_type(Success(1).map(str))  # N: Revealed type is 'returns.result.Result[builtins.str*, Any]'


- case: success_apply1
  disable_cache: false
  main: |
    from returns.result import Success, Result

    reveal_type(Success(1).apply(Success(str)))  # N: Revealed type is 'returns.result.Result[builtins.str*, Any]'


- case: success_apply2
  disable_cache: false
  main: |
    from returns.result import Success, Result
    from returns.curry import curry

    @curry
    def sum_two(first: int, second: float) -> str:
        ...

    reveal_type(Success(2.0).apply(Success(1).apply(Success(sum_two))))  # N: Revealed type is 'returns.result.Result[builtins.str*, Any]'


- case: success_value_or
  disable_cache: false
  main: |
    from returns.result import Success

    reveal_type(Success(1).value_or(None))  # N: Revealed type is 'Union[builtins.int, None]'


- case: success_unwrap
  disable_cache: false
  main: |
    from returns.result import Success

    reveal_type(Success(1).unwrap())  # N: Revealed type is 'builtins.int*'
