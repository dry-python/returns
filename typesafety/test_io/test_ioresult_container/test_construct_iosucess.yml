- case: iosuccess_bind
  disable_cache: true
  main: |
    from returns.io import IOSuccess, IOResult

    def returns_result(param: int) -> IOResult[str, Exception]:
        ...

    first: IOResult[int, Exception] = IOSuccess(1)
    reveal_type(first.bind(returns_result))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, builtins.Exception]'


- case: iosuccess_bind_result
  disable_cache: true
  main: |
    from returns.io import IOSuccess, IOResult
    from returns.result import Result

    def returns_result(param: int) -> Result[str, Exception]:
        ...

    first: IOResult[int, Exception] = IOSuccess(1)
    reveal_type(first.bind_result(returns_result))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, builtins.Exception]'


- case: iosuccess_bind_io
  disable_cache: true
  main: |
    from returns.io import IO, IOSuccess, IOResult

    def returns_io(param: int) -> IO[str]:
        ...

    first: IOResult[int, Exception] = IOSuccess(1)
    reveal_type(first.bind_io(returns_io))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, builtins.Exception]'


- case: iosuccess_unify1
  disable_cache: true
  main: |
    from returns.io import IOSuccess, IOResult

    def returns_result(param: int) -> IOResult[str, TypeError]:
        ...

    first: IOResult[int, ValueError] = IOSuccess(1)
    reveal_type(first.unify(returns_result))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, Union[builtins.ValueError, builtins.TypeError*]]'


- case: iosuccess_unify2
  disable_cache: true
  main: |
    from typing import Union
    from returns.io import IOSuccess, IOResult

    def returns_result(param: int) -> IOResult[str, TypeError]:
        ...

    first: IOResult[int, Union[ValueError, KeyError]] = IOSuccess(1)
    reveal_type(first.unify(returns_result))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, Union[builtins.ValueError, builtins.KeyError, builtins.TypeError*]]'


- case: iosuccess_unify3
  disable_cache: true
  main: |
    from typing import Union
    from returns.io import IOSuccess, IOResult

    def returns_result(param: int) -> IOResult[str, Union[KeyError, TypeError]]:
        ...

    first: IOResult[int, ValueError] = IOSuccess(1)
    reveal_type(first.unify(returns_result))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, Union[builtins.ValueError, builtins.KeyError, builtins.TypeError]]'


- case: iosuccess_map
  disable_cache: true
  main: |
    from returns.io import IOSuccess, IOResult

    reveal_type(IOSuccess(1).map(str))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, Any]'


- case: iosuccess_apply
  disable_cache: true
  main: |
    from returns.io import IOSuccess, IOResult

    def transform(arg: int) -> str:
        ...

    reveal_type(IOSuccess(1).apply(IOSuccess(transform)))  # N: Revealed type is 'returns.io.IOResult[builtins.str*, Any]'


- case: iosuccess_value_or
  disable_cache: true
  main: |
    from returns.io import IOSuccess

    reveal_type(IOSuccess(1).value_or(None))  # N: Revealed type is 'returns.io.IO[Union[builtins.int, None]]'


- case: iosuccess_unwrap
  disable_cache: true
  main: |
    from returns.io import IOSuccess

    reveal_type(IOSuccess(1).unwrap())  # N: Revealed type is 'returns.io.IO[builtins.int*]'
