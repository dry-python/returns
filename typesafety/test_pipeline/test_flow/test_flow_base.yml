- case: flow_function
  disable_cache: false
  main: |
    from returns.pipeline import flow

    def inc(arg: int) -> int:
        ...

    reveal_type(flow(1, inc, inc, inc, inc, inc))  # N: Revealed type is 'builtins.int'


- case: flow_function_with_overloads1
  disable_cache: false
  main: |
    from returns.pipeline import flow

    def convert(arg: str) -> float:
        ...

    reveal_type(flow('1.0', convert, int, bool))  # N: Revealed type is 'builtins.bool*'


- case: flow_function_with_overloads2
  disable_cache: false
  main: |
    from returns.pipeline import flow
    from returns.functions import identity

    def convert(arg: str) -> float:
        ...

    reveal_type(flow('1.0', identity, convert, identity, int, identity, bool, identity))  # N: Revealed type is 'builtins.bool*'


- case: flow_with_object1
  disable_cache: false
  main: |
    from returns.pipeline import flow

    class Test(object):
        def __call__(self, arg: int) -> float:
            ...

    reveal_type(flow(1, Test()))  # N: Revealed type is 'builtins.float'


- case: flow_with_object2
  disable_cache: false
  main: |
    from returns.pipeline import flow

    class Test(object):
        def __init__(self, arg: int) -> None:
            ...

    reveal_type(flow(1, Test))  # N: Revealed type is 'main.Test'


- case: flow_with_lambdas
  disable_cache: false
  main: |
    from returns.pipeline import flow

    reveal_type(
        flow(  # N: Revealed type is 'builtins.float*'
            1,
            lambda x: x,
            str,
            lambda y: y.split(' '),
            lambda z: ''.join(z),
            lambda x: x,
            lambda f: float(f),
        )
    )


- case: flow_with_methods
  disable_cache: false
  main: |
    from returns.pipeline import flow

    class Test(object):
        def method(self, arg: int) -> int:
            ...

        @classmethod
        def method_class(cls, arg: int) -> int:
            ...

        @staticmethod
        def method_static(arg: int) -> int:
            ...

    reveal_type(
        flow(  # N: Revealed type is 'builtins.int'
            1,
            Test().method,
            Test.method_class,
            Test.method_static,
        )
    )


- case: flow_with_any
  disable_cache: false
  main: |
    from returns.pipeline import flow
    from typing import Any

    def test(arg: int) -> Any:
        ...

    reveal_type(flow(1, test))  # N: Revealed type is 'Any'


- case: flow_with_containers
  disable_cache: false
  main: |
    from returns.pipeline import flow
    from returns.pointfree import bind, map_
    from returns.result import Result
    from returns.functions import identity

    x: Result[int, str]

    def bound(arg: int) -> Result[float, str]:
        ...

    def mappable(arg: float) -> bool:
        ...

    reveal_type(flow(x, bind(bound), identity, map_(mappable)))  # N: Revealed type is 'returns.result.Result[builtins.bool, builtins.str]'


- case: bind_result_and_flow1
  disable_cache: false
  main: |
    from returns.result import Result
    from returns.io import IOResult
    from returns.functions import identity
    from returns.pointfree import bind_result
    from returns.pipeline import flow

    def test(arg: int) -> Result[float, str]:
        ...

    def second(arg: float) -> Result[bool, str]:
        ...

    r: IOResult[int, str]
    reveal_type(flow(r, identity, bind_result(test), bind_result(second)))  # N: Revealed type is 'returns.io.IOResult[builtins.bool, builtins.str]'


- case: bind_result_and_flow2
  disable_cache: false
  main: |
    from returns.result import Result
    from returns.io import IOResult
    from returns.functions import identity
    from returns.pointfree import bind_result
    from returns.pipeline import flow

    def test(arg: int) -> Result[float, str]:
        ...

    def second(arg: float) -> Result[bool, str]:
        ...

    r: IOResult[int, str]
    reveal_type(flow(r, bind_result(test), identity, bind_result(second)))  # N: Revealed type is 'returns.io.IOResult[builtins.bool, builtins.str]'


# Regression to
# https://github.com/dry-python/returns/issues/461
- case: bind_result_and_flow3
  disable_cache: false
  main: |
    from returns.result import Result
    from returns.io import IOResult
    from returns.functions import identity
    from returns.pointfree import bind_result
    from returns.pipeline import flow

    def test(arg: int) -> Result[float, str]:
        ...

    def second(arg: float) -> Result[bool, str]:
        ...

    r: IOResult[int, str]
    reveal_type(flow(r, bind_result(test), bind_result(second)))  # N: Revealed type is 'returns.io.IOResult[builtins.bool, builtins.str]'
