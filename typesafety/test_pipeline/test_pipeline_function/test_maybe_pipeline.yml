- case: maybe_pipeline
  disable_cache: true
  main: |
    from returns.pipeline import pipeline
    from returns.maybe import Maybe

    @pipeline(Maybe)
    def returns_maybe(arg: str) -> Maybe[str]:
        ...

    reveal_type(returns_maybe("a"))  # N: Revealed type is 'returns.maybe.Maybe[builtins.str]'


- case: maybe_async_pipeline
  disable_cache: true
  main: |
    from returns.pipeline import pipeline
    from returns.maybe import Maybe

    @pipeline(Maybe)
    async def returns_maybe(arg: str) -> Maybe[str]:
        ...

    reveal_type(returns_maybe("a"))  # N: Revealed type is 'typing.Coroutine[Any, Any, returns.maybe.Maybe[builtins.str]]'


- case: maybe_wrong_pipeline
  disable_cache: true
  main: |
    from returns.pipeline import pipeline
    from returns.maybe import Maybe
    from returns.result import Result

    @pipeline(Result)
    def returns_maybe(arg: str) -> Maybe[int]:
        ...

    reveal_type(returns_maybe("a"))

  out: |
    main:5: error: Value of type variable "_ReturnResultType" of "__call__" of "_PipelineResultProtocol" cannot be "Callable[[str], Maybe[int]]"
    main:9: note: Revealed type is 'returns.maybe.Maybe[builtins.int]'
