- case: result_pipeline
  disable_cache: true
  main: |
    from returns.pipeline import pipeline
    from returns.result import Result

    @pipeline(Result)
    def returns_result(arg: str) -> Result[int, str]:
        ...

    reveal_type(returns_result("a"))  # N: Revealed type is 'returns.result.Result[builtins.int, builtins.str]'


- case: result_async_pipeline
  disable_cache: true
  main: |
    from returns.pipeline import pipeline
    from returns.result import Result

    @pipeline(Result)
    async def returns_result(arg: str) -> Result[int, str]:
        ...

    reveal_type(returns_result("a"))  # N: Revealed type is 'typing.Coroutine[Any, Any, returns.result.Result[builtins.int, builtins.str]]'


- case: result_wrong_pipeline
  disable_cache: true
  main: |
    from returns.pipeline import pipeline
    from returns.maybe import Maybe
    from returns.result import Result

    @pipeline(Maybe)
    def returns_result(arg: str) -> Result[int, str]:
        ...

    reveal_type(returns_result("a"))

  out: |
    main:5: error: Value of type variable "_ReturnMaybeType" of "__call__" of "_PipelineMaybeProtocol" cannot be "Callable[[str], Result[int, str]]"
    main:9: note: Revealed type is 'returns.result.Result[builtins.int, builtins.str]'
