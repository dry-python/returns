- case: managed_with_reader_ioresult_callback
  disable_cache: true
  main: |
    from returns.context import ReaderIOResult
    from returns.pipeline import managed
    from returns.result import Result

    def use(acquired_value: int) -> ReaderIOResult[bool, float, str]:
        ...

    def release(
        acquired_value: int,
        use_value: Result[float, str],
    ) -> ReaderIOResult[bool, None, str]:
        ...

    reveal_type(managed(use, release))  # N: Revealed type is 'def (returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool, builtins.int, builtins.str]) -> returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool, builtins.float, builtins.str]'


- case: managed_with_reader_ioresult_error
  disable_cache: true
  main: |
    from returns.context import ReaderIOResult
    from returns.pipeline import managed
    from returns.result import Result

    def use(acquired_value: int) -> ReaderIOResult[bool, float, str]:
        ...

    def release(
        acquired_value: int,
        use_value: Result[float, int],
    ) -> ReaderIOResult[str, int, str]:
        ...

    reveal_type(managed(use, release))  # TODO: this type is really strange!
  out: |
    main:14: error: Argument 1 to "_managed" has incompatible type "Callable[[int], RequiresContextIOResult[bool, float, str]]"; expected "Callable[[int], IOResult[float, int]]"
    main:14: error: Argument 2 to "_managed" has incompatible type "Callable[[int, Result[float, int]], RequiresContextIOResult[str, int, str]]"; expected "Callable[[int, Result[float, int]], IOResult[None, int]]"
    main:14: note: Revealed type is 'def (returns.io.IOResult[builtins.int*, builtins.int*]) -> returns.io.IOResult[builtins.float*, builtins.int*]'
